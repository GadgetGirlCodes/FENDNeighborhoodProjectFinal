{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\src\\\\components\\\\Listing.js\";\nimport React, { Component } from 'react';\n\nvar Listing =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Listing, _Component);\n\n  function Listing() {\n    _classCallCheck(this, Listing);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Listing).apply(this, arguments));\n  }\n\n  _createClass(Listing, [{\n    key: \"render\",\n    // // use this.props.index to call a new function then pass on the props to pass index back to MapContainer\n    // // click for the marker at that index position in the list of markers at this.state.markers\n    // // take the code you already have in the marker click listener and move it into another function that take the index as a parameter\n    // toggleSelectedListing = (mapProps, marker) => {\n    //   // set google to mapProps from Map for marker creation\n    //   const { google } = mapProps;\n    //   const infoWindow = new google.maps.InfoWindow();\n    //   // if there is an open infoWindow, and another is clicked, \n    //   // close the active marker and set activeMarker state to null. References:\n    //   // https://developers.google.com/maps/documentation/javascript/events\n    //   // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\n    //   // https://stackoverflow.com/questions/34053826/how-to-use-this-in-google-maps-event-addlistener\n    //   google.maps.event.addListener(infoWindow, 'closeclick', () => {\n    //     this.props.activeMarker.setAnimation(null);\n    //     this.setState({ activeMarker: null });\n    //   });\n    //   // Content for each infoWindow. Reference found here\n    //   // https://developers.google.com/maps/documentation/javascript/infowindows\n    //   let windowContent =\n    //     `<div className=\"infoWindow\">\n    //           <h2>You Clicked This Listing!</h2>\n    //           <h3>${marker.name}</h3>\n    //           <p>Phone: ${marker.phone}</p>\n    //         </div>`;\n    //   this.props.index.addListener('click', (map) => {\n    //     // Use slice to create a temporary marker array that can be iterated over to stop the animation for the markers\n    //     // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n    //     let tempMarkers = this.props.markers.slice();\n    //     tempMarkers.forEach(mark => {\n    //       mark.setAnimation(null);\n    //     })\n    //     //set the content for the new window\n    //     infoWindow.setContent(windowContent);\n    //     //show the new window based on the clicked marker\n    //     infoWindow.open(map, marker);\n    //     //set state to activeMarker\n    //     this.setState({ activeMarker: marker });\n    //     //set marker animation\n    //     marker.setAnimation(google.maps.Animation.BOUNCE);\n    //   });\n    // }\n    value: function render() {\n      var displayedImage = this.props.listing.image_url !== \"\" ? this.props.listing.image_url : 'http://via.placeholder.com/250x250.jpg/FFFFFF/000000/?text=No+Image+Available';\n      return React.createElement(\"section\", {\n        //  onClick={this.props.toggleSelectedListing()} \n        className: \"listing\",\n        marker: this.props.activeMarker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        tabIndex: \"0\",\n        className: \"listingName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, this.props.listing.name), React.createElement(\"div\", {\n        className: \"listingPhoto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        alt: this.props.listing.name + \" photo\",\n        src: displayedImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, this.props.listing.address[0]), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, this.props.listing.address[1]), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: this.props.listing.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"See Yelp For More Information\")));\n    }\n  }]);\n\n  return Listing;\n}(Component);\n\nexport default Listing;","map":{"version":3,"sources":["C:\\Users\\Rebekah\\Desktop\\Phase 2 Nanodegree\\final-project\\src\\components\\Listing.js"],"names":["React","Component","Listing","displayedImage","props","listing","image_url","activeMarker","name","address","url"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,O;;;;;;;;;;;;;AACJ;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AACP,UAAIC,cAAc,GAAI,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,SAAnB,KAAiC,EAAlC,GACnB,KAAKF,KAAL,CAAWC,OAAX,CAAmBC,SADA,GACY,+EADjC;AAGA,aACE;AACA;AACC,QAAA,SAAS,EAAC,SAFX;AAGC,QAAA,MAAM,EAAE,KAAKF,KAAL,CAAWG,YAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIE;AAAK,QAAA,QAAQ,EAAC,GAAd;AAAkB,QAAA,SAAS,EAAC,aAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,KAAKH,KAAL,CAAWC,OAAX,CAAmBG,IAA9D,CAJF,EAKE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAE,KAAKJ,KAAL,CAAWC,OAAX,CAAmBG,IAAnB,GAA0B,QAApC;AAA8C,QAAA,GAAG,EAAEL,cAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CALF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKC,KAAL,CAAWC,OAAX,CAAmBI,OAAnB,CAA2B,CAA3B,CAAN,CARF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKL,KAAL,CAAWC,OAAX,CAAmBI,OAAnB,CAA2B,CAA3B,CAAN,CATF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK;AAAG,QAAA,IAAI,EAAE,KAAKL,KAAL,CAAWC,OAAX,CAAmBK,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAL,CAVF,CADF;AAcD;;;;EAjEmBT,S;;AAoEtB,eAAeC,OAAf","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Listing extends Component {\r\n  // // use this.props.index to call a new function then pass on the props to pass index back to MapContainer\r\n  // // click for the marker at that index position in the list of markers at this.state.markers\r\n  // // take the code you already have in the marker click listener and move it into another function that take the index as a parameter\r\n\r\n  // toggleSelectedListing = (mapProps, marker) => {\r\n  //   // set google to mapProps from Map for marker creation\r\n  //   const { google } = mapProps;\r\n  //   const infoWindow = new google.maps.InfoWindow();\r\n\r\n  //   // if there is an open infoWindow, and another is clicked, \r\n  //   // close the active marker and set activeMarker state to null. References:\r\n  //   // https://developers.google.com/maps/documentation/javascript/events\r\n  //   // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\r\n  //   // https://stackoverflow.com/questions/34053826/how-to-use-this-in-google-maps-event-addlistener\r\n  //   google.maps.event.addListener(infoWindow, 'closeclick', () => {\r\n  //     this.props.activeMarker.setAnimation(null);\r\n  //     this.setState({ activeMarker: null });\r\n  //   });\r\n\r\n  //   // Content for each infoWindow. Reference found here\r\n  //   // https://developers.google.com/maps/documentation/javascript/infowindows\r\n  //   let windowContent =\r\n  //     `<div className=\"infoWindow\">\r\n  //           <h2>You Clicked This Listing!</h2>\r\n  //           <h3>${marker.name}</h3>\r\n  //           <p>Phone: ${marker.phone}</p>\r\n  //         </div>`;\r\n\r\n  //   this.props.index.addListener('click', (map) => {\r\n  //     // Use slice to create a temporary marker array that can be iterated over to stop the animation for the markers\r\n  //     // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\r\n  //     let tempMarkers = this.props.markers.slice();\r\n  //     tempMarkers.forEach(mark => {\r\n  //       mark.setAnimation(null);\r\n  //     })\r\n  //     //set the content for the new window\r\n  //     infoWindow.setContent(windowContent);\r\n  //     //show the new window based on the clicked marker\r\n  //     infoWindow.open(map, marker);\r\n  //     //set state to activeMarker\r\n  //     this.setState({ activeMarker: marker });\r\n  //     //set marker animation\r\n  //     marker.setAnimation(google.maps.Animation.BOUNCE);\r\n  //   });\r\n  // }\r\n\r\n  render() {\r\n    let displayedImage = (this.props.listing.image_url !== \"\") ?\r\n      this.props.listing.image_url : 'http://via.placeholder.com/250x250.jpg/FFFFFF/000000/?text=No+Image+Available';\r\n\r\n    return (\r\n      <section\r\n      //  onClick={this.props.toggleSelectedListing()} \r\n       className='listing' \r\n       marker={this.props.activeMarker}>\r\n        <div tabIndex='0' className=\"listingName\">{this.props.listing.name}</div>\r\n        <div className=\"listingPhoto\">\r\n          <img alt={this.props.listing.name + \" photo\"} src={displayedImage} />\r\n        </div>\r\n        <div>{this.props.listing.address[0]}</div>\r\n        <div>{this.props.listing.address[1]}</div>\r\n        <div><a href={this.props.listing.url}>See Yelp For More Information</a></div>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Listing"]},"metadata":{},"sourceType":"module"}