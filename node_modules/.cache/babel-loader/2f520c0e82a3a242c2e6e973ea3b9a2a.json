{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\src\\\\components\\\\MapContainer.js\";\nimport React, { Component } from 'react';\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\n\nvar MapContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapContainer, _Component);\n\n  function MapContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      // selectedPlace: null,\n      // activeMarker: null,\n      markers: [],\n      showInfo: false\n    };\n\n    _this.createMarkers = function () {\n      var markers = _this.props.yelpData.map(function (marker) {\n        var mProps = {\n          key: marker.id,\n          name: marker.name,\n          position: {\n            lat: marker.coordinates.latitude,\n            lng: marker.coordinates.longitude\n          },\n          animation: _this.props.google.maps.Animation.DROP\n        };\n        return mProps;\n      });\n\n      _this.setState({\n        markers: markers\n      }); // let marker = new this.props.google.maps.Marker({\n      //   position: mProps.position,\n      //   animation: google.maps.Animation.DROP\n      // })\n      // return marker;\n\n    };\n\n    _this.onMarkerClick = function (marker, props, e) {\n      _this.setState({\n        // activeMarker: marker,\n        // selectedPlace: props,\n        showInfo: !_this.state.showInfo\n      });\n    };\n\n    _this.onInfoClose = function (props) {\n      if (_this.state.showInfo) {\n        _this.setState({\n          showInfo: false,\n          selectedPlace: null,\n          activeMarker: null\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var center = {\n        lat: 32.322613,\n        lng: -95.262592 // DONE: Map displays all location markers by default, and displays the filtered subset of location markers when a filter is applied.\n        // TODO: Clicking a marker displays unique information about a location somewhere on the page (modal, separate div, inside an infoWindow).\n        // Displays Map and markers. If filtered, only filtered markers are shown\n\n      };\n      return React.createElement(Map, {\n        \"aria-label\": \"map\",\n        role: \"application\",\n        google: this.props.google,\n        zoom: 15,\n        initialCenter: center,\n        onReady: this.createMarkers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, this.props.filteredListings !== null ? this.props.filteredListings.map(function (item) {\n        return React.createElement(Marker, {\n          key: item.id,\n          position: {\n            lat: item.coordinates.latitude,\n            lng: item.coordinates.longitude\n          },\n          name: item.name,\n          onClick: _this2.onMarkerClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        });\n      }) : this.props.yelpData.map(function (item) {\n        return React.createElement(Marker, {\n          key: item.id,\n          position: {\n            lat: item.coordinates.latitude,\n            lng: item.coordinates.longitude\n          },\n          name: item.name,\n          onClick: _this2.onMarkerClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        });\n      }), React.createElement(InfoWindow, {\n        marker: this.state.activeMarker,\n        visible: this.state.showInfo,\n        onClose: this.onInfoClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Somethingsomethingsomething\"))));\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\"\n})(MapContainer);","map":{"version":3,"sources":["C:\\Users\\Rebekah\\Desktop\\Phase 2 Nanodegree\\final-project\\src\\components\\MapContainer.js"],"names":["React","Component","Map","Marker","InfoWindow","GoogleApiWrapper","MapContainer","state","markers","showInfo","createMarkers","props","yelpData","map","marker","mProps","key","id","name","position","lat","coordinates","latitude","lng","longitude","animation","google","maps","Animation","DROP","setState","onMarkerClick","e","onInfoClose","selectedPlace","activeMarker","center","filteredListings","item","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nclass MapContainer extends Component {\r\n  state = {\r\n    // selectedPlace: null,\r\n    // activeMarker: null,\r\n    markers: [],\r\n    showInfo: false\r\n  }\r\n\r\n  createMarkers = () => {\r\n    let markers = this.props.yelpData.map((marker) => {\r\n      let mProps = {\r\n        key: marker.id,\r\n        name: marker.name,\r\n        position: { lat: marker.coordinates.latitude, lng: marker.coordinates.longitude },\r\n        animation: this.props.google.maps.Animation.DROP\r\n      }\r\n      return mProps;\r\n    });\r\n    this.setState({markers: markers});\r\n\r\n    // let marker = new this.props.google.maps.Marker({\r\n    //   position: mProps.position,\r\n    //   animation: google.maps.Animation.DROP\r\n    // })\r\n    // return marker;\r\n  }\r\n\r\n  onMarkerClick = (marker, props, e) => {\r\n    this.setState({\r\n      // activeMarker: marker,\r\n      // selectedPlace: props,\r\n      showInfo: !this.state.showInfo\r\n    })\r\n  };\r\n\r\n  onInfoClose = (props) => {\r\n    if (this.state.showInfo) {\r\n      this.setState({\r\n        showInfo: false,\r\n        selectedPlace: null,\r\n        activeMarker: null\r\n      })\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const center = {\r\n      lat: 32.322613,\r\n      lng: -95.262592\r\n    }\r\n\r\n\r\n    // DONE: Map displays all location markers by default, and displays the filtered subset of location markers when a filter is applied.\r\n\r\n    // TODO: Clicking a marker displays unique information about a location somewhere on the page (modal, separate div, inside an infoWindow).\r\n\r\n    // Displays Map and markers. If filtered, only filtered markers are shown\r\n    return (\r\n      <Map\r\n        aria-label=\"map\"\r\n        role=\"application\"\r\n        google={this.props.google}\r\n        zoom={15}\r\n        initialCenter={center}\r\n        onReady={this.createMarkers}\r\n      >\r\n        {/* Display location information as markers on map */}\r\n        {this.props.filteredListings !== null ?\r\n          (this.props.filteredListings.map((item) => (\r\n            <Marker\r\n              key={item.id}\r\n              position={{ lat: item.coordinates.latitude, lng: item.coordinates.longitude }}\r\n              name={item.name}\r\n              onClick={this.onMarkerClick}\r\n            />))) :\r\n          (this.props.yelpData.map((item) => (\r\n            <Marker\r\n              key={item.id}\r\n              position={{ lat: item.coordinates.latitude, lng: item.coordinates.longitude }}\r\n              name={item.name}\r\n              onClick={this.onMarkerClick}\r\n            />)\r\n          ))\r\n        }\r\n        <InfoWindow\r\n          marker={this.state.activeMarker}\r\n          visible={this.state.showInfo}\r\n          onClose={this.onInfoClose}>\r\n          <div>\r\n            <h1>Somethingsomethingsomething</h1>\r\n          </div>\r\n        </InfoWindow>\r\n      </Map>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (\"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\")\r\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}