{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport MapContainer from './components/MapContainer';\nimport Listing from './components/Listing';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport './App.css';\nlibrary.add(faBars);\nvar YELP_KEY = 'nURSXAKqkUMPdntGky6KItOf0vSFaLnwcaN-w7MPeI5543g1OtE6dVSA_tXWRMwZaSUzNuzeyGIfT_gsINuzE_9_HO8B__a3-cvcVUNrWgOLH2yX0FvC8q3ECcnXW3Yx';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      yelpData: [],\n      markerInfo: [],\n      allListings: [],\n      allMarkers: [],\n      filteredMarkers: null,\n      filteredListings: null,\n      menuOpen: false,\n      query: \"\" // Get and store location information from YelpAPI. Method for obtaining Yelp info was provided thanks to \n\n    };\n\n    _this.getYelpInfo = function () {\n      var url = \"https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?radius=5000&latitude=32.322613&longitude=-95.262592&sort_by=distance&limit=50\";\n      var headers = new Headers({\n        Authorization: \"Bearer \".concat(YELP_KEY)\n      });\n      var request = new Request(url, {\n        method: 'GET',\n        headers: headers\n      }); // Obtain info via FetchAPI then return data to response. If data is unavailable, show error\n\n      fetch(request).then(function (response) {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong...');\n        }\n      }) // set retrieved data to yelpData state\n      .then(function (data) {\n        return _this.setState({\n          yelpData: data.businesses\n        });\n      }) // pass specific data to markerInfo state using getMarkerInfo method\n      .then(function (markerData) {\n        return _this.getMarkerInfo(_this.state.yelpData);\n      }) // if error, throw error on console\n      .catch(function (error) {\n        return _this.setState({\n          error: error\n        });\n      });\n    };\n\n    _this.getMarkerInfo = function (markerData) {\n      var markerInfo = []; // Map over YelpAPI data to create array for markerInfo and set that array to markerInfo state\n\n      markerData.map(function (element) {\n        var info = {\n          key: element.id,\n          name: element.name,\n          position: {\n            lat: element.coordinates.latitude,\n            lng: element.coordinates.longitude\n          },\n          phone: element.display_phone,\n          address: element.location.display_address,\n          image_url: element.image_url,\n          url: element.url\n        }; // push info to markerInfo array\n\n        return markerInfo.push(info);\n      }); // Console log to test\n\n      console.log(markerInfo);\n\n      _this.setState({\n        markerInfo: markerInfo\n      });\n    };\n\n    _this.createListings = function () {\n      var newListings = [];\n\n      var newListing = _this.state.markerInfo.forEach(function (listing, index) {\n        var listingDetails = new Listing(React.createElement(\"li\", {\n          key: listing.key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, React.createElement(Listing, {\n          handleListingClick: _this.props.handleListingClick,\n          listing: listing,\n          index: index,\n          markers: _this.state.markers,\n          activeMarker: _this.state.activeMarker,\n          google: _this.props.google,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        })));\n        return listingDetails;\n      });\n\n      newListings.push(newListing);\n      console.log(newListings);\n\n      _this.setState({\n        allListings: newListings\n      });\n    };\n\n    _this.createMarkers = function (mapProps, map) {\n      // set google to mapProps from Map for marker creation\n      var google = mapProps.google;\n      var infoWindow = new google.maps.InfoWindow(); // if there is an open infoWindow, and another is clicked, \n      // close the active marker and set activeMarker state to null. References:\n      // https://developers.google.com/maps/documentation/javascript/events\n      // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\n      // https://stackoverflow.com/questions/34053826/how-to-use-this-in-google-maps-event-addlistener\n\n      google.maps.event.addListener(infoWindow, 'closeclick', function () {\n        _this.state.activeMarker.setAnimation(null);\n\n        _this.setState({\n          activeMarker: null\n        });\n      }); // array to store all markers\n\n      var markers = []; // For each markerInfo object, generate a Marker\n\n      _this.state.markerInfo.forEach(function (item) {\n        var marker = new google.maps.Marker({\n          position: {\n            lat: item.position.lat,\n            lng: item.position.lng\n          },\n          key: item.key,\n          name: item.name,\n          map: map,\n          phone: item.phone,\n          animation: google.maps.Animation.DROP\n        }); // Content for each infoWindow. Reference found here\n        // https://developers.google.com/maps/documentation/javascript/infowindows\n\n        var windowContent = \"<div className=\\\"infoWindow\\\">\\n            <h3>\".concat(marker.name, \"</h3>\\n            <p>Phone: \").concat(marker.phone, \"</p>\\n          </div>\");\n        marker.addListener('click', function (index) {\n          // Use slice to create a temporary marker array that can be iterated over to stop the animation for the markers\n          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n          var tempMarkers = _this.state.markers.slice();\n\n          tempMarkers.forEach(function (mark) {\n            mark.setAnimation(null);\n          }); //set the content for the new window\n\n          infoWindow.setContent(windowContent); //show the new window based on the clicked marker\n\n          infoWindow.open(map, marker); //set state to activeMarker\n\n          _this.setState({\n            activeMarker: marker\n          }); //set marker animation\n\n\n          marker.setAnimation(google.maps.Animation.BOUNCE);\n        }); // store marker into array to push to set to state\n\n        markers.push(marker);\n      }); // set state for markers\n\n\n      _this.setState({\n        allMarkers: markers,\n        filteredMarkers: markers\n      });\n    };\n\n    _this.toggleMenu = function () {\n      _this.setState({\n        menuOpen: !_this.state.menuOpen\n      });\n    };\n\n    _this.updateListing = function (query, map) {\n      if (query) {\n        // check listing with query, set state to show only filtered listings.\n        // Used toLowerCase to prevent any hangups with case-sensitivity\n        var filteredListings = _this.state.allListings.filter(function (listing) {\n          return listing.name.toLowerCase().includes(query.toLowerCase());\n        });\n\n        _this.setState({\n          filteredListings: filteredListings\n        });\n\n        _this.state.filteredMarkers.forEach(function (listing) {\n          // check markers with query, if no match, then hide markers\n          if (!listing.name.toLowerCase().includes(query.toLowerCase())) {\n            return listing.setVisible(false);\n          }\n        });\n      } else {\n        //clear filtered listings from state, show all listings and markers\n        _this.setState({\n          filteredListings: null\n        });\n\n        _this.setVisibleOnAll();\n      }\n    };\n\n    _this.setVisibleOnAll = function () {\n      _this.state.filteredMarkers.forEach(function (marker) {\n        return marker.setVisible(true);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // handleChange = (e) => {  \n    // }\n    // Fetch yelp info when component is mounted\n    value: function componentDidMount() {\n      this.getYelpInfo();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Wait for Yelp Data to populate. https://stackoverflow.com/questions/42132290/wait-for-react-promise-to-resolve-before-render\n      if (this.state.markerInfo === null) return 'Please wait. Loading data from Yelp!';\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"mainHeader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"Nom-Nom Finder\"), React.createElement(\"button\", {\n        \"aria-label\": \"Listing Menu\",\n        onClick: this.toggleMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(FontAwesomeIcon, {\n        icon: \"bars\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }))), React.createElement(MapContainer, {\n        markerInfo: this.state.markerInfo,\n        allListings: this.state.allListings,\n        allMarkers: this.state.allMarkers,\n        filteredListings: this.state.filteredListings,\n        filteredMarkers: this.state.filteredMarkers,\n        menuOpen: this.state.menuOpen,\n        query: this.state.query,\n        updateListing: this.updateListing,\n        handleListingClick: this.handleListingClick,\n        toggleMenu: this.toggleMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Rebekah\\Desktop\\Phase 2 Nanodegree\\final-project\\src\\App.js"],"names":["React","Component","MapContainer","Listing","library","FontAwesomeIcon","faBars","add","YELP_KEY","App","state","yelpData","markerInfo","allListings","allMarkers","filteredMarkers","filteredListings","menuOpen","query","getYelpInfo","url","headers","Headers","Authorization","request","Request","method","fetch","then","response","ok","json","Error","data","setState","businesses","markerData","getMarkerInfo","catch","error","map","element","info","key","id","name","position","lat","coordinates","latitude","lng","longitude","phone","display_phone","address","location","display_address","image_url","push","console","log","createListings","newListings","newListing","forEach","listing","index","listingDetails","props","handleListingClick","markers","activeMarker","google","createMarkers","mapProps","infoWindow","maps","InfoWindow","event","addListener","setAnimation","item","marker","Marker","animation","Animation","DROP","windowContent","tempMarkers","slice","mark","setContent","open","BOUNCE","toggleMenu","updateListing","filter","toLowerCase","includes","setVisible","setVisibleOnAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport MapContainer from './components/MapContainer';\r\nimport Listing from './components/Listing';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\r\nimport './App.css';\r\n\r\nlibrary.add(faBars)\r\n\r\nconst YELP_KEY = 'nURSXAKqkUMPdntGky6KItOf0vSFaLnwcaN-w7MPeI5543g1OtE6dVSA_tXWRMwZaSUzNuzeyGIfT_gsINuzE_9_HO8B__a3-cvcVUNrWgOLH2yX0FvC8q3ECcnXW3Yx'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    yelpData: [],\r\n    markerInfo: [],\r\n    allListings: [],\r\n    allMarkers: [],\r\n    filteredMarkers: null,\r\n    filteredListings: null,\r\n    menuOpen: false,\r\n    query: \"\"\r\n  }\r\n  \r\n  // Get and store location information from YelpAPI. Method for obtaining Yelp info was provided thanks to \r\n  getYelpInfo = () => {\r\n    let url = \"https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?radius=5000&latitude=32.322613&longitude=-95.262592&sort_by=distance&limit=50\"\r\n    let headers = new Headers({\r\n      Authorization: `Bearer ${YELP_KEY}`\r\n    });\r\n    let request = new Request(url, {\r\n      method: 'GET',\r\n      headers\r\n    })\r\n    // Obtain info via FetchAPI then return data to response. If data is unavailable, show error\r\n    fetch(request)\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          throw new Error('Something went wrong...');\r\n        }\r\n      })\r\n      // set retrieved data to yelpData state\r\n      .then(data => this.setState({ yelpData: data.businesses }))\r\n      // pass specific data to markerInfo state using getMarkerInfo method\r\n      .then(markerData => this.getMarkerInfo(this.state.yelpData))\r\n      // if error, throw error on console\r\n      .catch(error => this.setState({ error }));\r\n  };\r\n\r\n  getMarkerInfo = (markerData) => {\r\n    let markerInfo = [];\r\n    // Map over YelpAPI data to create array for markerInfo and set that array to markerInfo state\r\n    markerData.map(element => {\r\n      let info = {\r\n        key: element.id,\r\n        name: element.name,\r\n        position: { lat: element.coordinates.latitude, lng: element.coordinates.longitude },\r\n        phone: element.display_phone,\r\n        address: element.location.display_address,\r\n        image_url: element.image_url,\r\n        url: element.url\r\n      };\r\n      // push info to markerInfo array\r\n      return markerInfo.push(info);\r\n    })\r\n    // Console log to test\r\n    console.log(markerInfo);\r\n    this.setState({ markerInfo: markerInfo })\r\n  };\r\n\r\n  // Create listings based on the info taken from YelpData in MarkerInfo then store in state and push to MapContainer.js and Listing.js\r\n  createListings = () => {\r\n    let newListings = [];\r\n    \r\n    let newListing = this.state.markerInfo.forEach((listing, index) => {\r\n      const listingDetails = new Listing(\r\n      <li key={listing.key}>\r\n        <Listing\r\n          handleListingClick={this.props.handleListingClick}\r\n          listing={listing}\r\n          index={index}\r\n          markers={this.state.markers}\r\n          activeMarker={this.state.activeMarker}\r\n          google={this.props.google} />\r\n      </li>);\r\n      return listingDetails;\r\n    });\r\n    newListings.push(newListing);\r\n    console.log(newListings);\r\n    \r\n    this.setState({ allListings: newListings })\r\n  };\r\n\r\n  // Create markers using the props given from google-maps-react via \r\n  // mapProps and map https://github.com/fullstackreact/google-maps-react\r\n  createMarkers = (mapProps, map) => {\r\n    // set google to mapProps from Map for marker creation\r\n    const { google } = mapProps;\r\n    const infoWindow = new google.maps.InfoWindow();\r\n\r\n    // if there is an open infoWindow, and another is clicked, \r\n    // close the active marker and set activeMarker state to null. References:\r\n    // https://developers.google.com/maps/documentation/javascript/events\r\n    // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\r\n    // https://stackoverflow.com/questions/34053826/how-to-use-this-in-google-maps-event-addlistener\r\n    google.maps.event.addListener(infoWindow, 'closeclick', () => {\r\n      this.state.activeMarker.setAnimation(null);\r\n      this.setState({ activeMarker: null });\r\n    });\r\n\r\n    // array to store all markers\r\n    let markers = [];\r\n\r\n    // For each markerInfo object, generate a Marker\r\n    this.state.markerInfo.forEach(item => {\r\n      const marker = new google.maps.Marker({\r\n        position: { lat: item.position.lat, lng: item.position.lng },\r\n        key: item.key,\r\n        name: item.name,\r\n        map: map,\r\n        phone: item.phone,\r\n        animation: google.maps.Animation.DROP,\r\n      });\r\n\r\n      // Content for each infoWindow. Reference found here\r\n      // https://developers.google.com/maps/documentation/javascript/infowindows\r\n      let windowContent =\r\n        `<div className=\"infoWindow\">\r\n            <h3>${marker.name}</h3>\r\n            <p>Phone: ${marker.phone}</p>\r\n          </div>`;\r\n\r\n      marker.addListener('click', (index) => {\r\n        // Use slice to create a temporary marker array that can be iterated over to stop the animation for the markers\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\r\n        let tempMarkers = this.state.markers.slice();\r\n        tempMarkers.forEach(mark => {\r\n          mark.setAnimation(null);\r\n        })\r\n\r\n        //set the content for the new window\r\n        infoWindow.setContent(windowContent);\r\n        //show the new window based on the clicked marker\r\n        infoWindow.open(map, marker);\r\n        //set state to activeMarker\r\n        this.setState({ activeMarker: marker });\r\n        //set marker animation\r\n        marker.setAnimation(google.maps.Animation.BOUNCE);\r\n      });\r\n\r\n      // store marker into array to push to set to state\r\n      markers.push(marker);\r\n    });\r\n\r\n    // set state for markers\r\n    this.setState({ allMarkers: markers, filteredMarkers: markers });\r\n  }\r\n\r\n  // Toggle ListMenu using open state boolean\r\n  toggleMenu = () => {\r\n    this.setState({ menuOpen: !this.state.menuOpen });\r\n  }\r\n\r\n  // Set filteredListings state if query input.\r\n  updateListing = (query, map) => {\r\n    if (query) {\r\n      // check listing with query, set state to show only filtered listings.\r\n      // Used toLowerCase to prevent any hangups with case-sensitivity\r\n      let filteredListings = this.state.allListings.filter(listing => (listing.name.toLowerCase().includes(query.toLowerCase())));\r\n      this.setState({ filteredListings: filteredListings });\r\n      this.state.filteredMarkers.forEach((listing) => {\r\n        // check markers with query, if no match, then hide markers\r\n        if (!listing.name.toLowerCase().includes(query.toLowerCase())) {\r\n          return listing.setVisible(false);\r\n        }\r\n      })\r\n    } else {\r\n      //clear filtered listings from state, show all listings and markers\r\n      this.setState({ filteredListings: null });\r\n      this.setVisibleOnAll();\r\n    }\r\n  };\r\n\r\n  //Set all markers to visible\r\n  setVisibleOnAll = () => {\r\n    this.state.filteredMarkers.forEach((marker) => marker.setVisible(true))\r\n  };\r\n\r\n  // handleChange = (e) => {  \r\n\r\n  // }\r\n\r\n  // Fetch yelp info when component is mounted\r\n  componentDidMount() {\r\n    this.getYelpInfo();\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    // Wait for Yelp Data to populate. https://stackoverflow.com/questions/42132290/wait-for-react-promise-to-resolve-before-render\r\n    if (this.state.markerInfo === null) return 'Please wait. Loading data from Yelp!';\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <nav className=\"mainHeader\">\r\n          <h2>Nom-Nom Finder</h2>\r\n          <button aria-label=\"Listing Menu\" onClick={this.toggleMenu}><FontAwesomeIcon icon=\"bars\" /></button>\r\n        </nav>\r\n        <MapContainer\r\n          markerInfo={this.state.markerInfo}\r\n          allListings={this.state.allListings}\r\n          allMarkers={this.state.allMarkers}\r\n          filteredListings={this.state.filteredListings}\r\n          filteredMarkers={this.state.filteredMarkers}\r\n          menuOpen={this.state.menuOpen}\r\n          query={this.state.query}\r\n          updateListing={this.updateListing}\r\n          handleListingClick={this.handleListingClick}          \r\n          toggleMenu={this.toggleMenu}\r\n           />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}