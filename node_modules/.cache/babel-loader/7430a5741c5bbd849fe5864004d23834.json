{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport ListMenu from './components/ListMenu';\nimport MapContainer from './components/MapContainer';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport './App.css';\nlibrary.add(faBars);\nvar YELP_KEY = 'nURSXAKqkUMPdntGky6KItOf0vSFaLnwcaN-w7MPeI5543g1OtE6dVSA_tXWRMwZaSUzNuzeyGIfT_gsINuzE_9_HO8B__a3-cvcVUNrWgOLH2yX0FvC8q3ECcnXW3Yx';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      yelpData: [],\n      markerInfo: null,\n      filteredListings: null,\n      filteredMarkers: null,\n      menuOpen: false // DONE: Application utilizes the Google Maps API or another mapping system and at least one non-Google third-party API. Refer to this documentation\n      // DONE: All data requests are retrieved in an asynchronous manner using either the Fetch API or XMLHttpRequest.\n      // Get and store location information from YelpAPI\n\n    };\n\n    _this.getYelpInfo = function () {\n      var url = \"https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?radius=2000&latitude=32.322613&longitude=-95.262592&sort_by=distance\";\n      var headers = new Headers({\n        Authorization: \"Bearer \".concat(YELP_KEY)\n      });\n      var request = new Request(url, {\n        method: 'GET',\n        headers: headers\n      });\n      fetch(request).then(function (response) {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong...');\n        }\n      }).then(function (data) {\n        return _this.setState({\n          yelpData: data.businesses\n        });\n      }).then(function (markerData) {\n        return _this.getMarkerInfo(_this.state.yelpData);\n      }).catch(function (error) {\n        return _this.setState({\n          error: error\n        });\n      });\n    };\n\n    _this.getMarkerInfo = function (markerData) {\n      var markerInfo = []; // Map over YelpAPI data to create array for markerInfo and set that array to markerInfo state\n\n      markerData.map(function (element) {\n        var info = {\n          key: element.id,\n          name: element.name,\n          position: {\n            lat: element.coordinates.latitude,\n            lng: element.coordinates.longitude\n          },\n          phone: element.display_phone\n        };\n        return markerInfo.push(info);\n      });\n      console.log(markerInfo);\n\n      _this.setState({\n        markerInfo: markerInfo\n      });\n    };\n\n    _this.toggleMenu = function () {\n      _this.setState({\n        menuOpen: !_this.state.menuOpen\n      });\n    };\n\n    _this.updateListing = function (query) {\n      if (query) {\n        _this.setState(_objectSpread({}, _this.state, {\n          filteredListings: _this.filterListings(query) // filteredMarkers: this.filterMarkers(query)\n\n        }));\n      } else {\n        _this.setState({\n          filteredListings: null,\n          filteredMarkers: null\n        });\n      }\n    };\n\n    _this.filterListings = function (query) {\n      if (!query) {\n        return;\n      } else {\n        return _this.state.yelpData.filter(function (listing) {\n          return listing.name.toLowerCase().includes(query.toLowerCase());\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // //Update markers based on filter input, if none, leave filteredMarkers empty\n    // filterMarkers = (query) => {\n    //   if (!query) {\n    //     return;\n    //   } else {\n    //     return this.state.markers.filter(listing => listing.name.toLowerCase().includes(query.toLowerCase()));\n    //   }\n    // }\n    value: function componentDidMount() {\n      this.getYelpInfo();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Wait for Yelp Data to populate. https://stackoverflow.com/questions/42132290/wait-for-react-promise-to-resolve-before-render\n      if (this.state.markerInfo === null) return 'Please wait. Loading data from Yelp!';\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"mainHeader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Nom-Nom Finder\"), React.createElement(\"button\", {\n        \"aria-label\": \"Listing\",\n        onClick: this.toggleMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(FontAwesomeIcon, {\n        icon: \"bars\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }))), React.createElement(ListMenu, {\n        yelpData: this.state.yelpData,\n        menuOpen: this.state.menuOpen,\n        toggleMenu: this.toggleMenu,\n        updateListing: this.updateListing,\n        filteredMarkers: this.state.filteredMarkers,\n        filteredListings: this.state.filteredListings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(MapContainer, {\n        yelpData: this.state.yelpData,\n        markerInfo: this.state.markerInfo,\n        filteredListings: this.state.filteredListings,\n        filteredMarkers: this.state.filteredMarkers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Rebekah\\Desktop\\Phase 2 Nanodegree\\final-project\\src\\App.js"],"names":["React","Component","ListMenu","MapContainer","library","FontAwesomeIcon","faBars","add","YELP_KEY","App","state","yelpData","markerInfo","filteredListings","filteredMarkers","menuOpen","getYelpInfo","url","headers","Headers","Authorization","request","Request","method","fetch","then","response","ok","json","Error","data","setState","businesses","markerData","getMarkerInfo","catch","error","map","element","info","key","id","name","position","lat","coordinates","latitude","lng","longitude","phone","display_phone","push","console","log","toggleMenu","updateListing","query","filterListings","filter","listing","toLowerCase","includes"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport ListMenu from './components/ListMenu';\r\nimport MapContainer from './components/MapContainer';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\r\nimport './App.css';\r\n\r\nlibrary.add(faBars)\r\n\r\nconst YELP_KEY = 'nURSXAKqkUMPdntGky6KItOf0vSFaLnwcaN-w7MPeI5543g1OtE6dVSA_tXWRMwZaSUzNuzeyGIfT_gsINuzE_9_HO8B__a3-cvcVUNrWgOLH2yX0FvC8q3ECcnXW3Yx'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    yelpData: [],\r\n    markerInfo: null,\r\n    filteredListings: null,\r\n    filteredMarkers: null,\r\n    menuOpen: false\r\n  }\r\n\r\n  // DONE: Application utilizes the Google Maps API or another mapping system and at least one non-Google third-party API. Refer to this documentation\r\n  // DONE: All data requests are retrieved in an asynchronous manner using either the Fetch API or XMLHttpRequest.\r\n\r\n  // Get and store location information from YelpAPI\r\n  getYelpInfo = () => {\r\n      let url = \"https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?radius=2000&latitude=32.322613&longitude=-95.262592&sort_by=distance\"\r\n      let headers = new Headers({\r\n          Authorization: `Bearer ${YELP_KEY}`\r\n        });\r\n      let request = new Request(url, {\r\n        method: 'GET',\r\n        headers\r\n      })\r\n      fetch(request)\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response.json();\r\n          } else {\r\n            throw new Error('Something went wrong...');\r\n          }\r\n        })\r\n        .then(data => this.setState({ yelpData: data.businesses }))\r\n        .then(markerData => this.getMarkerInfo(this.state.yelpData))\r\n        .catch(error => this.setState({ error }));\r\n    };\r\n\r\n  getMarkerInfo = (markerData) => {\r\n    let markerInfo = [];\r\n    // Map over YelpAPI data to create array for markerInfo and set that array to markerInfo state\r\n    markerData.map(element => {\r\n      let info = {\r\n        key: element.id,\r\n        name: element.name,\r\n        position: {lat: element.coordinates.latitude, lng: element.coordinates.longitude},\r\n        phone: element.display_phone\r\n      };\r\n      return markerInfo.push(info);    \r\n  })\r\n  console.log(markerInfo);\r\n  this.setState({ markerInfo: markerInfo })\r\n};\r\n\r\n\r\n\r\n  // Toggle ListMenu\r\n  toggleMenu = () => {\r\n    this.setState({ menuOpen: !this.state.menuOpen });\r\n  }\r\n\r\n  // Set filteredListings state if query input\r\n  updateListing = (query) => {\r\n    if (query) {\r\n      this.setState({\r\n        ...this.state,\r\n        filteredListings: this.filterListings(query),\r\n        // filteredMarkers: this.filterMarkers(query)\r\n      });\r\n    } else {\r\n      this.setState({ filteredListings: null, filteredMarkers: null })\r\n    }\r\n  }\r\n\r\n  //Update listings based on filter input, if none, leave filteredListings empty\r\n  filterListings = (query) => {\r\n    if (!query) {\r\n      return;\r\n    } else {\r\n      return this.state.yelpData.filter(listing => listing.name.toLowerCase().includes(query.toLowerCase()));\r\n    }\r\n  }\r\n\r\n  // //Update markers based on filter input, if none, leave filteredMarkers empty\r\n  // filterMarkers = (query) => {\r\n  //   if (!query) {\r\n  //     return;\r\n  //   } else {\r\n  //     return this.state.markers.filter(listing => listing.name.toLowerCase().includes(query.toLowerCase()));\r\n  //   }\r\n  // }\r\n\r\n  componentDidMount() {\r\n    this.getYelpInfo();\r\n  };\r\n\r\n  render() {\r\n    // Wait for Yelp Data to populate. https://stackoverflow.com/questions/42132290/wait-for-react-promise-to-resolve-before-render\r\n    if (this.state.markerInfo === null) return 'Please wait. Loading data from Yelp!';\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <nav className=\"mainHeader\">\r\n          <h2>Nom-Nom Finder</h2>\r\n          <button aria-label=\"Listing\" onClick={this.toggleMenu}><FontAwesomeIcon icon=\"bars\"/></button>\r\n        </nav>\r\n        <ListMenu\r\n          yelpData={this.state.yelpData}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenu={this.toggleMenu}\r\n          updateListing={this.updateListing}\r\n          filteredMarkers={this.state.filteredMarkers}\r\n          filteredListings={this.state.filteredListings} />\r\n        <MapContainer\r\n          yelpData={this.state.yelpData}\r\n          markerInfo={this.state.markerInfo}\r\n          filteredListings={this.state.filteredListings} \r\n          filteredMarkers={this.state.filteredMarkers} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}