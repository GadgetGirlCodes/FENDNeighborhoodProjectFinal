{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport MapContainer from './components/MapContainer';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport './App.css';\nlibrary.add(faBars);\nvar YELP_KEY = 'nURSXAKqkUMPdntGky6KItOf0vSFaLnwcaN-w7MPeI5543g1OtE6dVSA_tXWRMwZaSUzNuzeyGIfT_gsINuzE_9_HO8B__a3-cvcVUNrWgOLH2yX0FvC8q3ECcnXW3Yx';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      yelpData: [],\n      markerInfo: null,\n      menuOpen: false,\n      error: null // DONE: Application utilizes the Google Maps API or another mapping system and at least one non-Google third-party API.\n      // DONE: All data requests are retrieved in an asynchronous manner using either the Fetch API.\n      // Get and store location information from YelpAPI\n\n    };\n\n    _this.getYelpInfo = function () {\n      var url = \"https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?radius=5000&latitude=32.322613&longitude=-95.262592&sort_by=distance&limit=50\";\n      var headers = new Headers({\n        Authorization: \"Bearer \".concat(YELP_KEY)\n      });\n      var request = new Request(url, {\n        method: 'GET',\n        headers: headers\n      });\n      fetch(request).then(function (response) {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong...');\n        }\n      }).then(function (data) {\n        return _this.setState({\n          yelpData: data.businesses\n        });\n      }).then(function (markerData) {\n        return _this.getMarkerInfo(_this.state.yelpData);\n      }).catch(function (error) {\n        return _this.setState({\n          error: error\n        });\n      });\n    };\n\n    _this.getMarkerInfo = function (markerData) {\n      var markerInfo = []; // Map over YelpAPI data to create array for markerInfo and set that array to markerInfo state\n\n      markerData.map(function (element) {\n        var info = {\n          key: element.id,\n          name: element.name,\n          position: {\n            lat: element.coordinates.latitude,\n            lng: element.coordinates.longitude\n          },\n          phone: element.display_phone,\n          address: element.location.display_address,\n          image_url: element.image_url,\n          url: element.url\n        };\n        return markerInfo.push(info);\n      }); // Console log to test\n\n      console.log(markerInfo);\n\n      _this.setState({\n        markerInfo: markerInfo\n      });\n    };\n\n    _this.toggleMenu = function () {\n      _this.setState({\n        menuOpen: !_this.state.menuOpen\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // Fetch yelp info when component is mounted\n    value: function componentDidMount() {\n      this.getYelpInfo();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Wait for Yelp Data to populate. https://stackoverflow.com/questions/42132290/wait-for-react-promise-to-resolve-before-render\n      if (this.state.markerInfo === null) return 'Please wait. Loading data from Yelp!';\n      return this.state.error !== null ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"'Sorry! Something went wrong! Please try again later.'\") : React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"mainHeader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Nom-Nom Finder\"), React.createElement(\"button\", {\n        \"aria-label\": \"Listing Menu\",\n        onClick: this.toggleMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(FontAwesomeIcon, {\n        icon: \"bars\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }))), React.createElement(MapContainer, {\n        markerInfo: this.state.markerInfo,\n        menuOpen: this.state.menuOpen,\n        toggleMenu: this.toggleMenu,\n        filteredListings: this.state.filteredListings,\n        filteredMarkers: this.state.filteredMarkers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Rebekah\\Desktop\\Phase 2 Nanodegree\\final-project\\src\\App.js"],"names":["React","Component","MapContainer","library","FontAwesomeIcon","faBars","add","YELP_KEY","App","state","yelpData","markerInfo","menuOpen","error","getYelpInfo","url","headers","Headers","Authorization","request","Request","method","fetch","then","response","ok","json","Error","data","setState","businesses","markerData","getMarkerInfo","catch","map","element","info","key","id","name","position","lat","coordinates","latitude","lng","longitude","phone","display_phone","address","location","display_address","image_url","push","console","log","toggleMenu","filteredListings","filteredMarkers"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport MapContainer from './components/MapContainer';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\r\nimport './App.css';\r\n\r\nlibrary.add(faBars)\r\n\r\nconst YELP_KEY = 'nURSXAKqkUMPdntGky6KItOf0vSFaLnwcaN-w7MPeI5543g1OtE6dVSA_tXWRMwZaSUzNuzeyGIfT_gsINuzE_9_HO8B__a3-cvcVUNrWgOLH2yX0FvC8q3ECcnXW3Yx'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    yelpData: [],\r\n    markerInfo: null,\r\n    menuOpen: false,\r\n    error: null\r\n  }\r\n\r\n  // DONE: Application utilizes the Google Maps API or another mapping system and at least one non-Google third-party API.\r\n  // DONE: All data requests are retrieved in an asynchronous manner using either the Fetch API.\r\n\r\n  // Get and store location information from YelpAPI\r\n  getYelpInfo = () => {\r\n    let url = \"https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?radius=5000&latitude=32.322613&longitude=-95.262592&sort_by=distance&limit=50\"\r\n    let headers = new Headers({\r\n      Authorization: `Bearer ${YELP_KEY}`\r\n    });\r\n    let request = new Request(url, {\r\n      method: 'GET',\r\n      headers\r\n    })\r\n    fetch(request)\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          throw new Error('Something went wrong...');\r\n        }\r\n      })\r\n      .then(data => this.setState({ yelpData: data.businesses }))\r\n      .then(markerData => this.getMarkerInfo(this.state.yelpData))\r\n      .catch(error => this.setState({ error: error }));\r\n  };\r\n\r\n  // Create an array to hold specific information from the YelpAPI to use for markers and listings.\r\n  getMarkerInfo = (markerData) => {\r\n    let markerInfo = [];\r\n    // Map over YelpAPI data to create array for markerInfo and set that array to markerInfo state\r\n    markerData.map(element => {\r\n      let info = {\r\n        key: element.id,\r\n        name: element.name,\r\n        position: { lat: element.coordinates.latitude, lng: element.coordinates.longitude },\r\n        phone: element.display_phone,\r\n        address: element.location.display_address,\r\n        image_url: element.image_url,\r\n        url: element.url\r\n      };\r\n      return markerInfo.push(info);\r\n    })\r\n    // Console log to test\r\n    console.log(markerInfo);\r\n    this.setState({ markerInfo: markerInfo })\r\n  };\r\n\r\n  // Toggle ListMenu\r\n  toggleMenu = () => {\r\n    this.setState({ menuOpen: !this.state.menuOpen });\r\n  }\r\n\r\n  // Fetch yelp info when component is mounted\r\n  componentDidMount() {\r\n    this.getYelpInfo();\r\n  };\r\n\r\n  render() {\r\n    // Wait for Yelp Data to populate. https://stackoverflow.com/questions/42132290/wait-for-react-promise-to-resolve-before-render\r\n    if (this.state.markerInfo === null) return 'Please wait. Loading data from Yelp!';\r\n\r\n\r\n\r\n    return (\r\n      this.state.error !== null ?\r\n       <div>'Sorry! Something went wrong! Please try again later.'</div>\r\n        :\r\n       <div className=\"App\">\r\n          <nav className=\"mainHeader\">\r\n            <h2>Nom-Nom Finder</h2>\r\n            <button aria-label=\"Listing Menu\" onClick={this.toggleMenu}><FontAwesomeIcon icon=\"bars\" /></button>\r\n          </nav>\r\n          <MapContainer\r\n            markerInfo={this.state.markerInfo}\r\n            menuOpen={this.state.menuOpen}\r\n            toggleMenu={this.toggleMenu}\r\n            filteredListings={this.state.filteredListings}\r\n            filteredMarkers={this.state.filteredMarkers} />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}