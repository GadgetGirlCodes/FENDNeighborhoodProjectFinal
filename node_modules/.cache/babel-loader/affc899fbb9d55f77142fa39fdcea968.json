{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\src\\\\components\\\\MapContainer.js\";\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport Drawer from '@material-ui/core/Drawer';\nimport { DebounceInput } from 'react-debounce-input';\nimport Listing from './Listing';\n\nvar MapContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapContainer, _Component);\n\n  function MapContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      allMarkers: [],\n      filteredMarkers: null,\n      filteredListings: null,\n      activeMarker: null,\n      query: \"\" // Create markers using the props passed from the Google map via google-maps-react\n      // https://github.com/fullstackreact/google-maps-react\n\n    };\n\n    _this.createMarkers = function (mapProps, map) {\n      // set google to mapProps from Map to allow for marker and info window creation\n      var google = mapProps.google;\n      var infoWindow = new google.maps.InfoWindow(); // if there is an open infoWindow, and another is clicked, close the active marker and set activeMarker state to null\n\n      google.maps.event.addListener(infoWindow, 'closeclick', function () {\n        _this.state.activeMarker.setAnimation(null);\n\n        _this.setState({\n          activeMarker: null\n        });\n      }); // array to store all markers\n\n      var markers = []; // For each markerInfo object, generate a GoogleMaps Marker object\n\n      _this.props.markerInfo.forEach(function (item) {\n        var marker = new google.maps.Marker({\n          position: {\n            lat: item.position.lat,\n            lng: item.position.lng\n          },\n          key: item.key,\n          name: item.name,\n          map: map,\n          phone: item.phone,\n          animation: google.maps.Animation.DROP\n        }); // Content for each infoWindow. Reference found here\n        // https://developers.google.com/maps/documentation/javascript/infowindows\n\n        var windowContent = \"<div className=\\\"infoWindow\\\">\\n            <h3>\".concat(marker.name, \"</h3>\\n            <p>Phone: \").concat(marker.phone, \"</p>\\n          </div>\");\n        marker.addListener('click', function () {\n          // Use slice to create a temporary marker array that can be iterated over to stop the animation for the markers\n          var tempMarkers = _this.state.allMarkers.slice();\n\n          tempMarkers.forEach(function (mark) {\n            mark.setAnimation(null);\n          }); //set the content for the new window\n\n          infoWindow.setContent(windowContent); //show the new window based on the clicked marker\n\n          infoWindow.open(map, marker); //set state to activeMarker\n\n          _this.setState({\n            activeMarker: marker\n          }); //set marker animation\n\n\n          _this.state.activeMarker.setAnimation(google.maps.Animation.BOUNCE);\n        }); // store marker into array to push to set to state\n\n        markers.push(marker);\n      }); // set state for markers\n\n\n      _this.setState({\n        allMarkers: markers,\n        filteredMarkers: markers\n      });\n    };\n\n    _this.toggleListingMarker = function (index) {\n      if (_this.state.filteredListings !== null) {\n        var filteredMarker = _this.state.filteredMarkers[index];\n        var thisListing = document.getElementById(index);\n\n        _this.setState({\n          activeMarker: filteredMarker\n        });\n\n        _this.toggleListingVisible(thisListing);\n\n        _this.toggleMarkerAnimation(filteredMarker);\n      } else {\n        var clickedMarker = _this.state.allMarkers[index];\n\n        var _thisListing = document.getElementById(index);\n\n        _this.setState({\n          activeMarker: clickedMarkern\n        });\n\n        _this.toggleListingVisible(_thisListing);\n\n        _this.toggleMarkerAnimation(clickedMarker);\n      }\n    };\n\n    _this.toggleMarkerAnimation = function (animatedMarker) {\n      if (animatedMarker.animating === false) {\n        animatedMarker.setAnimation(_this.props.google.maps.Animation.BOUNCE);\n      } else {\n        animatedMarker.setAnimation(_this.props.google.maps.Animation.NONE);\n      }\n    };\n\n    _this.toggleListingVisible = function (clickedListing) {\n      if (clickedListing.hasAttribute('hidden')) {\n        clickedListing.removeAttribute('hidden');\n      } else {\n        clickedListing.setAttribute('hidden', true);\n      }\n    };\n\n    _this.onInfoWindowClose = function (marker) {\n      marker.setAnimation(null);\n    };\n\n    _this.updateQuery = function (query) {\n      _this.setState({\n        query: query\n      });\n\n      _this.updateListing(query);\n    };\n\n    _this.updateListing = function (query, map) {\n      if (query) {\n        // check listing with query, set state to show only filtered listings.\n        // Used toLowerCase to prevent any hangups with case-sensitivity\n        var filteredListings = _this.props.markerInfo.filter(function (listing) {\n          return listing.name.toLowerCase().includes(query.toLowerCase());\n        });\n\n        _this.setState({\n          filteredListings: filteredListings\n        });\n\n        _this.state.filteredMarkers.forEach(function (listing) {\n          // check markers with query, if no match, then hide markers\n          if (!listing.name.toLowerCase().includes(query.toLowerCase())) {\n            return listing.setVisible(false);\n          }\n        });\n      } else {\n        //clear filtered listings from state, show all listings and markers\n        _this.setState({\n          filteredListings: null\n        });\n\n        _this.toggleVisibleOnAll();\n      }\n    };\n\n    _this.toggleVisibleOnAll = function () {\n      _this.state.allMarkers.forEach(function (marker) {\n        return marker.setVisible(true);\n      });\n    };\n\n    _this.displayListings = function () {\n      if (_this.state.filteredListings !== null) {\n        var filteredListing = _this.state.filteredListings.map(function (listing, index) {\n          return React.createElement(\"li\", {\n            key: listing.key,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          }, React.createElement(Listing, {\n            index: index,\n            listing: listing,\n            allMarkers: _this.state.allMarkers,\n            toggleListingMarker: _this.toggleListingMarker,\n            google: _this.props.google,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151\n            },\n            __self: this\n          }));\n        });\n\n        return filteredListing;\n      } else {\n        //if no filtered listings, display all listings\n        return _this.props.markerInfo.map(function (listing, index) {\n          return React.createElement(\"li\", {\n            key: listing.key,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163\n            },\n            __self: this\n          }, React.createElement(Listing, {\n            index: index,\n            listing: listing,\n            allMarkers: _this.state.allMarkers,\n            toggleListingMarker: _this.toggleListingMarker,\n            google: _this.props.google,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 164\n            },\n            __self: this\n          }));\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var center = {\n        lat: 32.314747,\n        lng: -95.249265\n      };\n      return (// Displays Map and markers.\n        React.createElement(\"section\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, React.createElement(Map, {\n          \"aria-label\": \"map\",\n          role: \"application\",\n          google: this.props.google,\n          zoom: 14,\n          initialCenter: center,\n          onClick: this.props.toggleMenu,\n          onReady: this.createMarkers,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }), React.createElement(Drawer, {\n          open: this.props.menuOpen,\n          onClose: this.props.toggleMenu,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, React.createElement(\"section\", {\n          className: \"listMenu\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }, React.createElement(DebounceInput, {\n          minLength: 1,\n          debounceTimeout: 500,\n          className: \"filter\",\n          element: \"input\",\n          type: \"text\",\n          placeholder: \"Filter Listings by Name\",\n          onChange: function onChange(e) {\n            return _this2.updateQuery(e.target.value);\n          },\n          value: this.state.query,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        }), React.createElement(\"ul\", {\n          className: \"list\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }, this.displayListings()))))\n      );\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\"\n})(MapContainer);","map":{"version":3,"sources":["C:\\Users\\Rebekah\\Desktop\\Phase 2 Nanodegree\\final-project\\src\\components\\MapContainer.js"],"names":["React","Component","Map","GoogleApiWrapper","Drawer","DebounceInput","Listing","MapContainer","state","allMarkers","filteredMarkers","filteredListings","activeMarker","query","createMarkers","mapProps","map","google","infoWindow","maps","InfoWindow","event","addListener","setAnimation","setState","markers","props","markerInfo","forEach","item","marker","Marker","position","lat","lng","key","name","phone","animation","Animation","DROP","windowContent","tempMarkers","slice","mark","setContent","open","BOUNCE","push","toggleListingMarker","index","filteredMarker","thisListing","document","getElementById","toggleListingVisible","toggleMarkerAnimation","clickedMarker","clickedMarkern","animatedMarker","animating","NONE","clickedListing","hasAttribute","removeAttribute","setAttribute","onInfoWindowClose","updateQuery","updateListing","filter","listing","toLowerCase","includes","setVisible","toggleVisibleOnAll","displayListings","filteredListing","center","toggleMenu","menuOpen","e","target","value","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport { DebounceInput } from 'react-debounce-input';\r\nimport Listing from './Listing';\r\n\r\nclass MapContainer extends Component {\r\n  state = {\r\n    allMarkers: [],\r\n    filteredMarkers: null,\r\n    filteredListings: null,\r\n    activeMarker: null,\r\n    query: \"\"\r\n  }\r\n\r\n  // Create markers using the props passed from the Google map via google-maps-react\r\n  // https://github.com/fullstackreact/google-maps-react\r\n  createMarkers = (mapProps, map) => {\r\n    // set google to mapProps from Map to allow for marker and info window creation\r\n    const { google } = mapProps;\r\n    const infoWindow = new google.maps.InfoWindow();\r\n\r\n    // if there is an open infoWindow, and another is clicked, close the active marker and set activeMarker state to null\r\n    google.maps.event.addListener(infoWindow, 'closeclick', () => {\r\n      this.state.activeMarker.setAnimation(null);\r\n      this.setState({ activeMarker: null });\r\n    });\r\n\r\n    // array to store all markers\r\n    let markers = [];\r\n\r\n    // For each markerInfo object, generate a GoogleMaps Marker object\r\n    this.props.markerInfo.forEach(item => {\r\n      const marker = new google.maps.Marker({\r\n        position: { lat: item.position.lat, lng: item.position.lng },\r\n        key: item.key,\r\n        name: item.name,\r\n        map: map,\r\n        phone: item.phone,\r\n        animation: google.maps.Animation.DROP\r\n      });\r\n\r\n      // Content for each infoWindow. Reference found here\r\n      // https://developers.google.com/maps/documentation/javascript/infowindows\r\n      let windowContent =\r\n        `<div className=\"infoWindow\">\r\n            <h3>${marker.name}</h3>\r\n            <p>Phone: ${marker.phone}</p>\r\n          </div>`;\r\n\r\n      marker.addListener('click', () => {\r\n        // Use slice to create a temporary marker array that can be iterated over to stop the animation for the markers\r\n        let tempMarkers = this.state.allMarkers.slice();\r\n        tempMarkers.forEach(mark => {\r\n          mark.setAnimation(null);\r\n        })\r\n\r\n        //set the content for the new window\r\n        infoWindow.setContent(windowContent);\r\n        //show the new window based on the clicked marker\r\n        infoWindow.open(map, marker);\r\n        //set state to activeMarker\r\n        this.setState({ activeMarker: marker });\r\n        //set marker animation\r\n        this.state.activeMarker.setAnimation(google.maps.Animation.BOUNCE);\r\n      });\r\n\r\n      // store marker into array to push to set to state\r\n      markers.push(marker);\r\n    });\r\n\r\n    // set state for markers\r\n    this.setState({ allMarkers: markers, filteredMarkers: markers });\r\n  };\r\n\r\n  // Set the animation for the marker that corresponds to each listing. \r\n  toggleListingMarker = (index) => {\r\n    if (this.state.filteredListings !== null) {\r\n      let filteredMarker = this.state.filteredMarkers[index];\r\n      let thisListing = document.getElementById(index);\r\n      this.setState({ activeMarker: filteredMarker })\r\n      this.toggleListingVisible(thisListing);\r\n      this.toggleMarkerAnimation(filteredMarker);\r\n    } else {\r\n      let clickedMarker = this.state.allMarkers[index];\r\n      let thisListing = document.getElementById(index);\r\n      this.setState({ activeMarker: clickedMarkern })\r\n      this.toggleListingVisible(thisListing);\r\n      this.toggleMarkerAnimation(clickedMarker);\r\n    }\r\n  };\r\n\r\n  // Activates animation for a marker based on it's current animation. Used for toggleListingMarker to toggle marker animation.\r\n  toggleMarkerAnimation = (animatedMarker) => {\r\n    if (animatedMarker.animating === false) {\r\n      animatedMarker.setAnimation(this.props.google.maps.Animation.BOUNCE)\r\n    } else {\r\n      animatedMarker.setAnimation(this.props.google.maps.Animation.NONE)\r\n    }\r\n  }\r\n\r\n  // Shows or hides the details of a listing based on the current attribute. Used for toggleListingMarker \r\n  toggleListingVisible = (clickedListing) => {\r\n    if (clickedListing.hasAttribute('hidden')) {\r\n      clickedListing.removeAttribute('hidden');\r\n    } else {\r\n      clickedListing.setAttribute('hidden', true);\r\n    }\r\n  };\r\n\r\n  onInfoWindowClose = (marker) => {\r\n    marker.setAnimation(null);\r\n  }\r\n\r\n  // Updates filter input if there's a query, then updates listings and markers\r\n  updateQuery = (query) => {\r\n    this.setState({ query: query })\r\n    this.updateListing(query)\r\n  };\r\n\r\n  // Set filteredListings state if query input.\r\n  updateListing = (query, map) => {\r\n    if (query) {\r\n      // check listing with query, set state to show only filtered listings.\r\n      // Used toLowerCase to prevent any hangups with case-sensitivity\r\n      let filteredListings = this.props.markerInfo.filter(listing => (listing.name.toLowerCase().includes(query.toLowerCase())));\r\n      this.setState({ filteredListings: filteredListings });\r\n      this.state.filteredMarkers.forEach((listing) => {\r\n        // check markers with query, if no match, then hide markers\r\n        if (!listing.name.toLowerCase().includes(query.toLowerCase())) {\r\n          return listing.setVisible(false);\r\n        }\r\n      })\r\n    } else {\r\n      //clear filtered listings from state, show all listings and markers\r\n      this.setState({ filteredListings: null });\r\n      this.toggleVisibleOnAll();\r\n    }\r\n  };\r\n\r\n  //Set all markers to visible\r\n  toggleVisibleOnAll = () => {\r\n    this.state.allMarkers.forEach((marker) => marker.setVisible(true))\r\n  };\r\n\r\n  // Map over filteredListings and display filtered listings. If null, display all listings\r\n  displayListings = () => {\r\n    if (this.state.filteredListings !== null) {\r\n      let filteredListing = this.state.filteredListings.map((listing, index) => (\r\n        <li key={listing.key}>\r\n          <Listing\r\n            index={index}\r\n            listing={listing}\r\n            allMarkers={this.state.allMarkers}\r\n            toggleListingMarker={this.toggleListingMarker}\r\n            google={this.props.google} />\r\n        </li>\r\n      ));\r\n      return filteredListing;\r\n    } else {\r\n      //if no filtered listings, display all listings\r\n      return this.props.markerInfo.map((listing, index) => (\r\n        <li key={listing.key}>\r\n          <Listing\r\n            index={index}\r\n            listing={listing}\r\n            allMarkers={this.state.allMarkers}\r\n            toggleListingMarker={this.toggleListingMarker}\r\n            google={this.props.google} />\r\n        </li>));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const center = {\r\n      lat: 32.314747,\r\n      lng: -95.249265\r\n    }\r\n\r\n    return (\r\n      // Displays Map and markers.\r\n      <section>\r\n        <Map\r\n          aria-label=\"map\"\r\n          role=\"application\"\r\n          google={this.props.google}\r\n          zoom={14}\r\n          initialCenter={center}\r\n          onClick={this.props.toggleMenu}\r\n          onReady={this.createMarkers} />\r\n        <Drawer\r\n          open={this.props.menuOpen}\r\n          onClose={this.props.toggleMenu} >\r\n          <section className=\"listMenu\">\r\n            <DebounceInput\r\n              minLength={1}\r\n              debounceTimeout={500}\r\n              className='filter'\r\n              element=\"input\"\r\n              type='text'\r\n              placeholder='Filter Listings by Name'\r\n              onChange={e => this.updateQuery(e.target.value)}\r\n              value={this.state.query} />\r\n            <ul className='list'>\r\n              {this.displayListings()}\r\n            </ul>\r\n          </section>\r\n        </Drawer>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (\"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\")\r\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}