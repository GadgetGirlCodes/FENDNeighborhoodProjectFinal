{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\src\\\\components\\\\MapContainer.js\";\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport Drawer from '@material-ui/core/Drawer';\nimport { DebounceInput } from 'react-debounce-input';\n\nvar MapContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapContainer, _Component);\n\n  function MapContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      markers: [],\n      allMarkers: [],\n      filteredMarkers: null,\n      filteredListings: null,\n      activeMarker: null,\n      query: \"\" // Create markers using the props given from google-maps-react via \n      // mapProps and map https://github.com/fullstackreact/google-maps-react\n\n    };\n\n    _this.createMarkers = function (mapProps, map) {\n      // set google to mapProps from Map for marker creation\n      var google = mapProps.google;\n      var infoWindow = new google.maps.InfoWindow(); // if there is an open infoWindow, and another is clicked, \n      // close the active marker and set activeMarker state to null. References:\n      // https://developers.google.com/maps/documentation/javascript/events\n      // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\n      // https://stackoverflow.com/questions/34053826/how-to-use-this-in-google-maps-event-addlistener\n\n      google.maps.event.addListener(infoWindow, 'closeclick', function () {\n        _this.state.activeMarker.setAnimation(null);\n\n        _this.setState({\n          activeMarker: null\n        });\n      }); // array to store all markers\n\n      var markers = []; // For each markerInfo object, generate a Marker\n\n      _this.props.markerInfo.forEach(function (item) {\n        var marker = new google.maps.Marker({\n          position: {\n            lat: item.position.lat,\n            lng: item.position.lng\n          },\n          key: item.key,\n          name: item.name,\n          map: map,\n          phone: item.phone,\n          visible: true,\n          animation: google.maps.Animation.DROP\n        }); // Content for each infoWindow. Reference found here\n        // https://developers.google.com/maps/documentation/javascript/infowindows\n\n        var windowContent = \"<div className=\\\"infoWindow\\\">\\n            <h3>\".concat(marker.name, \"</h3>\\n            <p>Phone: \").concat(marker.phone, \"</p>\\n          </div>\");\n        marker.addListener('click', function (index) {\n          // Use slice to create a temporary marker array that can be iterated over to stop the animation for the markers\n          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n          var tempMarkers = _this.state.allMarkers.slice();\n\n          tempMarkers.forEach(function (mark) {\n            mark.setAnimation(null);\n          }); //set the content for the new window\n\n          infoWindow.setContent(windowContent); //show the new window based on the clicked marker\n\n          infoWindow.open(map, marker); //set state to activeMarker\n\n          _this.setState({\n            activeMarker: marker\n          }); //set marker animation\n\n\n          marker.setAnimation(google.maps.Animation.BOUNCE);\n        }); // store marker into array to push to set to state\n\n        markers.push(marker);\n      }); // set state for markers\n\n\n      _this.setState({\n        allMarkers: markers,\n        filteredMarkers: markers\n      });\n    };\n\n    _this.updateQuery = function (query) {\n      _this.setState({\n        query: query\n      });\n\n      _this.props.updateListing(query);\n    };\n\n    _this.displayListings = function () {\n      if (_this.state.filteredListings !== null) {\n        var filteredListing = _this.state.filteredListings.map(function () {\n          return filteredListing;\n        });\n      } else {\n        var newListing = _this.state.allListings.map(function () {\n          return newListing;\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var center = {\n        lat: 32.314747,\n        lng: -95.249265\n      };\n      return (// Displays Map and markers.\n        React.createElement(Map, {\n          \"aria-label\": \"map\",\n          role: \"application\",\n          google: this.props.google,\n          zoom: 14,\n          initialCenter: center,\n          onClick: this.props.toggleMenu,\n          onReady: this.createMarkers,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(Drawer, {\n          open: this.props.menuOpen,\n          onClose: this.props.toggleMenu,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(\"section\", {\n          className: \"listMenu\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, React.createElement(DebounceInput, {\n          minLength: 1,\n          debounceTimeout: 500,\n          className: \"filter\",\n          element: \"input\",\n          type: \"text\",\n          placeholder: \"Filter Listings by Name\",\n          onChange: function onChange(e) {\n            return _this2.updateQuery(e.target.value);\n          },\n          value: this.state.query,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }), React.createElement(\"ul\", {\n          className: \"list\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }))))\n      );\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\"\n})(MapContainer);","map":{"version":3,"sources":["C:\\Users\\Rebekah\\Desktop\\Phase 2 Nanodegree\\final-project\\src\\components\\MapContainer.js"],"names":["React","Component","Map","GoogleApiWrapper","Drawer","DebounceInput","MapContainer","state","markers","allMarkers","filteredMarkers","filteredListings","activeMarker","query","createMarkers","mapProps","map","google","infoWindow","maps","InfoWindow","event","addListener","setAnimation","setState","props","markerInfo","forEach","item","marker","Marker","position","lat","lng","key","name","phone","visible","animation","Animation","DROP","windowContent","index","tempMarkers","slice","mark","setContent","open","BOUNCE","push","updateQuery","updateListing","displayListings","filteredListing","newListing","allListings","center","toggleMenu","menuOpen","e","target","value","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport { DebounceInput } from 'react-debounce-input';\r\n\r\nclass MapContainer extends Component {\r\n  state = {\r\n    markers: [],\r\n    allMarkers: [],\r\n    filteredMarkers: null,\r\n    filteredListings: null,\r\n    activeMarker: null,\r\n    query: \"\"\r\n  }\r\n\r\n    // Create markers using the props given from google-maps-react via \r\n  // mapProps and map https://github.com/fullstackreact/google-maps-react\r\n  createMarkers = (mapProps, map) => {\r\n    // set google to mapProps from Map for marker creation\r\n    const { google } = mapProps;\r\n    const infoWindow = new google.maps.InfoWindow();\r\n\r\n    // if there is an open infoWindow, and another is clicked, \r\n    // close the active marker and set activeMarker state to null. References:\r\n    // https://developers.google.com/maps/documentation/javascript/events\r\n    // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events\r\n    // https://stackoverflow.com/questions/34053826/how-to-use-this-in-google-maps-event-addlistener\r\n    google.maps.event.addListener(infoWindow, 'closeclick', () => {\r\n      this.state.activeMarker.setAnimation(null);\r\n      this.setState({ activeMarker: null });\r\n    });\r\n\r\n    // array to store all markers\r\n    let markers = [];\r\n\r\n    // For each markerInfo object, generate a Marker\r\n    this.props.markerInfo.forEach(item => {\r\n      const marker = new google.maps.Marker({\r\n        position: { lat: item.position.lat, lng: item.position.lng },\r\n        key: item.key,\r\n        name: item.name,\r\n        map: map,\r\n        phone: item.phone,\r\n        visible: true,\r\n        animation: google.maps.Animation.DROP,\r\n      });\r\n\r\n      // Content for each infoWindow. Reference found here\r\n      // https://developers.google.com/maps/documentation/javascript/infowindows\r\n      let windowContent =\r\n        `<div className=\"infoWindow\">\r\n            <h3>${marker.name}</h3>\r\n            <p>Phone: ${marker.phone}</p>\r\n          </div>`;\r\n\r\n      marker.addListener('click', (index) => {\r\n        // Use slice to create a temporary marker array that can be iterated over to stop the animation for the markers\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\r\n        let tempMarkers = this.state.allMarkers.slice();\r\n        tempMarkers.forEach(mark => {\r\n          mark.setAnimation(null);\r\n        })\r\n\r\n        //set the content for the new window\r\n        infoWindow.setContent(windowContent);\r\n        //show the new window based on the clicked marker\r\n        infoWindow.open(map, marker);\r\n        //set state to activeMarker\r\n        this.setState({ activeMarker: marker });\r\n        //set marker animation\r\n        marker.setAnimation(google.maps.Animation.BOUNCE);\r\n      });\r\n\r\n      // store marker into array to push to set to state\r\n      markers.push(marker);\r\n    });\r\n\r\n    // set state for markers\r\n    this.setState({ allMarkers: markers, filteredMarkers: markers });\r\n  }\r\n\r\n    // Helper function to pass to Map to create listings and markers\r\n    // populateMandL = (mapProps, map) => {\r\n    //   this.props.createListings();\r\n    //   this.createMarkers();\r\n    // };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Updates filter input if there's a query, then updates listings and markers\r\n  updateQuery = (query) => {\r\n    this.setState({ query: query })\r\n    this.props.updateListing(query)\r\n  };\r\n\r\n  // Map over filteredListings and display filtered listings. If null, display all listings\r\n  displayListings = () => {\r\n    if (this.state.filteredListings !== null) {\r\n      let filteredListing = this.state.filteredListings.map(() => {\r\n        return filteredListing;\r\n      });\r\n    } else {\r\n      let newListing = this.state.allListings.map(() => {\r\n        return newListing;\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const center = {\r\n      lat: 32.314747,\r\n      lng: -95.249265\r\n    }\r\n\r\n    return (\r\n      // Displays Map and markers.\r\n      <Map\r\n        aria-label=\"map\"\r\n        role=\"application\"\r\n        google={this.props.google}\r\n        zoom={14}\r\n        initialCenter={center}\r\n        onClick={this.props.toggleMenu}\r\n        onReady={this.createMarkers} >\r\n        <Drawer\r\n          open={this.props.menuOpen}\r\n          onClose={this.props.toggleMenu} >\r\n          <section className=\"listMenu\">\r\n            <DebounceInput\r\n              minLength={1}\r\n              debounceTimeout={500}\r\n              className='filter'\r\n              element=\"input\"\r\n              type='text'\r\n              placeholder='Filter Listings by Name'\r\n              onChange={e => this.updateQuery(e.target.value)}\r\n              value={this.state.query} />\r\n            <ul className='list'>\r\n\r\n            </ul>\r\n          </section>\r\n        </Drawer>\r\n      </Map>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (\"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\")\r\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}