{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\src\\\\components\\\\MapContainer.js\";\nimport React, { Component } from 'react';\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\n\nvar MapContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapContainer, _Component);\n\n  function MapContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedPlace: null,\n      activeMarker: null,\n      showInfo: false\n    };\n\n    _this.onMarkerClick = function (marker, props, e) {\n      _this.setState({\n        activeMarker: marker,\n        selectedPlace: props,\n        showInfo: !_this.state.showInfo\n      });\n    };\n\n    _this.onInfoClose = function (props) {\n      if (_this.state.showInfo) {\n        _this.setState({\n          showInfo: false,\n          selectedPlace: null,\n          activeMarker: null\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"createMarkers\",\n    value: function createMarkers(marker, info, map) {\n      var markers = [];\n      this.props.yelpData.forEach(function (element) {\n        var info = {\n          key: element.id,\n          map: map,\n          name: element.name,\n          position: element.coordinates\n        };\n        return markers.push(info);\n      });\n      console.log(markers);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var center = {\n        lat: 32.322613,\n        lng: -95.262592 // DONE: Map displays all location markers by default, and displays the filtered subset of location markers when a filter is applied.\n        // TODO: Clicking a marker displays unique information about a location somewhere on the page (modal, separate div, inside an infoWindow).\n        // Displays Map and markers. If filtered, only filtered markers are shown\n\n      };\n      return React.createElement(Map, {\n        \"aria-label\": \"map\",\n        role: \"application\",\n        google: this.props.google,\n        zoom: 15,\n        initialCenter: center,\n        onReady: this.loadMarkers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\"\n})(MapContainer);","map":{"version":3,"sources":["C:\\Users\\Rebekah\\Desktop\\Phase 2 Nanodegree\\final-project\\src\\components\\MapContainer.js"],"names":["React","Component","Map","Marker","InfoWindow","GoogleApiWrapper","MapContainer","state","selectedPlace","activeMarker","showInfo","onMarkerClick","marker","props","e","setState","onInfoClose","info","map","markers","yelpData","forEach","element","key","id","name","position","coordinates","push","console","log","center","lat","lng","google","loadMarkers","apiKey"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,UAAtB,EAAkCC,gBAAlC,QAA0D,mBAA1D;;IAEMC,Y;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,aAAa,EAAE,IADT;AAENC,MAAAA,YAAY,EAAE,IAFR;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,K;;UAoBRC,a,GAAgB,UAACC,MAAD,EAASC,KAAT,EAAgBC,CAAhB,EAAsB;AACpC,YAAKC,QAAL,CAAc;AACZN,QAAAA,YAAY,EAAEG,MADF;AAEZJ,QAAAA,aAAa,EAAEK,KAFH;AAGZH,QAAAA,QAAQ,EAAE,CAAC,MAAKH,KAAL,CAAWG;AAHV,OAAd;AAIC,K;;UAEHM,W,GAAc,UAACH,KAAD,EAAW;AACvB,UAAI,MAAKN,KAAL,CAAWG,QAAf,EAAyB;AACvB,cAAKK,QAAL,CAAc;AACZL,UAAAA,QAAQ,EAAE,KADE;AAEZF,UAAAA,aAAa,EAAE,IAFH;AAGZC,UAAAA,YAAY,EAAE;AAHF,SAAd;AAKD;AACF,K;;;;;;;kCA7BaG,M,EAAQK,I,EAAMC,G,EAAK;AAC/B,UAAIC,OAAO,GAAG,EAAd;AACA,WAAKN,KAAL,CAAWO,QAAX,CAAoBC,OAApB,CAA4B,UAAAC,OAAO,EAAI;AACrC,YAAIL,IAAI,GAAG;AACTM,UAAAA,GAAG,EAAED,OAAO,CAACE,EADJ;AAETN,UAAAA,GAAG,EAAEA,GAFI;AAGTO,UAAAA,IAAI,EAAEH,OAAO,CAACG,IAHL;AAITC,UAAAA,QAAQ,EAAEJ,OAAO,CAACK;AAJT,SAAX;AAMA,eAAOR,OAAO,CAACS,IAAR,CAAaX,IAAb,CAAP;AACD,OARD;AASAY,MAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AACD;;;6BAmBQ;AACP,UAAMY,MAAM,GAAG;AACbC,QAAAA,GAAG,EAAE,SADQ;AAEbC,QAAAA,GAAG,EAAE,CAAC,SAFO,CAMjB;AAEA;AAEE;;AAVe,OAAf;AAWA,aACE,oBAAC,GAAD;AACE,sBAAW,KADb;AAEE,QAAA,IAAI,EAAC,aAFP;AAGE,QAAA,MAAM,EAAE,KAAKpB,KAAL,CAAWqB,MAHrB;AAIE,QAAA,IAAI,EAAE,EAJR;AAKE,QAAA,aAAa,EAAEH,MALjB;AAME,QAAA,OAAO,EAAE,KAAKI,WANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAYD;;;;EA9DwBlC,S;;AAiE3B,eAAeI,gBAAgB,CAAC;AAC9B+B,EAAAA,MAAM,EAAG;AADqB,CAAD,CAAhB,CAEZ9B,YAFY,CAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nclass MapContainer extends Component {\r\n  state = {\r\n    selectedPlace: null,\r\n    activeMarker: null,\r\n    showInfo: false,\r\n  }\r\n\r\n  createMarkers(marker, info, map) {\r\n    let markers = [];\r\n    this.props.yelpData.forEach(element => {\r\n      let info = {\r\n        key: element.id,\r\n        map: map,\r\n        name: element.name,\r\n        position: element.coordinates,\r\n      };\r\n      return markers.push(info);\r\n    });\r\n    console.log(markers);\r\n  }\r\n\r\n  onMarkerClick = (marker, props, e) => {\r\n    this.setState({ \r\n      activeMarker: marker,\r\n      selectedPlace: props,\r\n      showInfo: !this.state.showInfo })\r\n    };\r\n\r\n  onInfoClose = (props) => {\r\n    if (this.state.showInfo) {\r\n      this.setState({\r\n        showInfo: false,\r\n        selectedPlace: null,\r\n        activeMarker: null\r\n      })\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const center = {\r\n      lat: 32.322613,\r\n      lng: -95.262592\r\n    }\r\n\r\n\r\n  // DONE: Map displays all location markers by default, and displays the filtered subset of location markers when a filter is applied.\r\n  \r\n  // TODO: Clicking a marker displays unique information about a location somewhere on the page (modal, separate div, inside an infoWindow).\r\n\r\n    // Displays Map and markers. If filtered, only filtered markers are shown\r\n    return (\r\n      <Map \r\n        aria-label=\"map\"\r\n        role=\"application\"\r\n        google={this.props.google}\r\n        zoom={15}        \r\n        initialCenter={center}\r\n        onReady={this.loadMarkers}\r\n        >\r\n        {/* Display location information as markers on map */}\r\n      </Map>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (\"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\")\r\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}