{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\src\\\\components\\\\MapContainer.js\";\nimport React, { Component } from 'react';\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\n\nvar MapContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapContainer, _Component);\n\n  function MapContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      markers: [],\n      selectedPlace: {},\n      activeMarker: {},\n      showInfo: false\n    };\n\n    _this.createMarkers = function () {\n      var markers = []; // map over yelpData to create new marker array\n\n      _this.props.yelpData.map(function (item) {\n        markers.push(item.coordinates, item.name);\n      });\n\n      console.log(markers); //   let position = ;\n      //   let marker = new.google.maps.Marker({\n      //     position: ,\n      //   })\n    };\n\n    _this.onMarkerClick = function (marker, props, e) {\n      _this.setState({\n        activeMarker: marker,\n        selectedPlace: props,\n        showInfo: !_this.state.showInfo\n      });\n    };\n\n    _this.onInfoClose = function (props) {\n      if (_this.state.showInfo) {\n        _this.setState({\n          showInfo: false,\n          selectedPlace: {},\n          activeMarker: {}\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"render\",\n    value: function render() {\n      var center = {\n        lat: 32.322613,\n        lng: -95.262592 // DONE: Map displays all location markers by default, and displays the filtered subset of location markers when a filter is applied.\n        // TODO: Clicking a marker displays unique information about a location somewhere on the page (modal, separate div, inside an infoWindow).\n        // Displays Map and markers. If filtered, only filtered markers are shown\n\n      };\n      return React.createElement(Map, {\n        \"aria-label\": \"map\",\n        role: \"application\",\n        google: this.props.google,\n        zoom: 15,\n        initialCenter: center,\n        onReady: this.createMarkers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(InfoWindow, {\n        marker: this.state.activeMarker,\n        visible: this.state.showInfo,\n        onClose: this.onInfoClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Somethingsomethingsomething\"))));\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\"\n})(MapContainer);","map":{"version":3,"sources":["C:\\Users\\Rebekah\\Desktop\\Phase 2 Nanodegree\\final-project\\src\\components\\MapContainer.js"],"names":["React","Component","Map","Marker","InfoWindow","GoogleApiWrapper","MapContainer","state","markers","selectedPlace","activeMarker","showInfo","createMarkers","props","yelpData","map","item","push","coordinates","name","console","log","onMarkerClick","marker","e","setState","onInfoClose","center","lat","lng","google","apiKey"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,UAAtB,EAAkCC,gBAAlC,QAA0D,mBAA1D;;IAEMC,Y;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,EADH;AAENC,MAAAA,aAAa,EAAE,EAFT;AAGNC,MAAAA,YAAY,EAAE,EAHR;AAINC,MAAAA,QAAQ,EAAE;AAJJ,K;;UAORC,a,GAAgB,YAAM;AACpB,UAAIJ,OAAO,GAAG,EAAd,CADoB,CAEpB;;AACA,YAAKK,KAAL,CAAWC,QAAX,CAAoBC,GAApB,CAAwB,UAACC,IAAD,EAAU;AAACR,QAAAA,OAAO,CAACS,IAAR,CAAaD,IAAI,CAACE,WAAlB,EAA+BF,IAAI,CAACG,IAApC;AAA0C,OAA7E;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYb,OAAZ,EAJoB,CAMtB;AAEA;AACA;AAEA;AACC,K;;UAEDc,a,GAAgB,UAACC,MAAD,EAASV,KAAT,EAAgBW,CAAhB,EAAsB;AACpC,YAAKC,QAAL,CAAc;AACZf,QAAAA,YAAY,EAAEa,MADF;AAEZd,QAAAA,aAAa,EAAEI,KAFH;AAGZF,QAAAA,QAAQ,EAAE,CAAC,MAAKJ,KAAL,CAAWI;AAHV,OAAd;AAIC,K;;UAEHe,W,GAAc,UAACb,KAAD,EAAW;AACvB,UAAI,MAAKN,KAAL,CAAWI,QAAf,EAAyB;AACvB,cAAKc,QAAL,CAAc;AACZd,UAAAA,QAAQ,EAAE,KADE;AAEZF,UAAAA,aAAa,EAAE,EAFH;AAGZC,UAAAA,YAAY,EAAE;AAHF,SAAd;AAKD;AACF,K;;;;;;;6BAEQ;AACP,UAAMiB,MAAM,GAAG;AACbC,QAAAA,GAAG,EAAE,SADQ;AAEbC,QAAAA,GAAG,EAAE,CAAC,SAFO,CAMjB;AAEA;AAEE;;AAVe,OAAf;AAWA,aACE,oBAAC,GAAD;AACE,sBAAW,KADb;AAEE,QAAA,IAAI,EAAC,aAFP;AAGE,QAAA,MAAM,EAAE,KAAKhB,KAAL,CAAWiB,MAHrB;AAIE,QAAA,IAAI,EAAE,EAJR;AAKE,QAAA,aAAa,EAAEH,MALjB;AAME,QAAA,OAAO,EAAE,KAAKf,aANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SA0BE,oBAAC,UAAD;AACI,QAAA,MAAM,EAAE,KAAKL,KAAL,CAAWG,YADvB;AAEI,QAAA,OAAO,EAAE,KAAKH,KAAL,CAAWI,QAFxB;AAGI,QAAA,OAAO,EAAE,KAAKe,WAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,CAJN,CA1BF,CADF;AAqCD;;;;EAxFwBzB,S;;AA2F3B,eAAeI,gBAAgB,CAAC;AAC9B0B,EAAAA,MAAM,EAAG;AADqB,CAAD,CAAhB,CAEZzB,YAFY,CAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nclass MapContainer extends Component {\r\n  state = {\r\n    markers: [],\r\n    selectedPlace: {},\r\n    activeMarker: {},\r\n    showInfo: false,\r\n  }\r\n\r\n  createMarkers = () => {\r\n    let markers = [];\r\n    // map over yelpData to create new marker array\r\n    this.props.yelpData.map((item) => {markers.push(item.coordinates, item.name)});\r\n    console.log(markers);\r\n    \r\n  //   let position = ;\r\n\r\n  //   let marker = new.google.maps.Marker({\r\n  //     position: ,\r\n\r\n  //   })\r\n  }\r\n\r\n  onMarkerClick = (marker, props, e) => {\r\n    this.setState({ \r\n      activeMarker: marker,\r\n      selectedPlace: props,\r\n      showInfo: !this.state.showInfo })\r\n    };\r\n\r\n  onInfoClose = (props) => {\r\n    if (this.state.showInfo) {\r\n      this.setState({\r\n        showInfo: false,\r\n        selectedPlace: {},\r\n        activeMarker: {}\r\n      })\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const center = {\r\n      lat: 32.322613,\r\n      lng: -95.262592\r\n    }\r\n\r\n\r\n  // DONE: Map displays all location markers by default, and displays the filtered subset of location markers when a filter is applied.\r\n  \r\n  // TODO: Clicking a marker displays unique information about a location somewhere on the page (modal, separate div, inside an infoWindow).\r\n\r\n    // Displays Map and markers. If filtered, only filtered markers are shown\r\n    return (\r\n      <Map \r\n        aria-label=\"map\"\r\n        role=\"application\"\r\n        google={this.props.google}\r\n        zoom={15}        \r\n        initialCenter={center}\r\n        onReady={this.createMarkers}\r\n        >\r\n        {/* Display location information as markers on map */}\r\n        {/* {this.props.filteredListings !== null ?\r\n          (this.props.filteredListings.map((item) => (\r\n            <Marker\r\n              key={item.id}\r\n              position={{lat: item.coordinates.latitude, lng: item.coordinates.longitude}}\r\n              name={item.name}\r\n              onClick={this.onMarkerClick}\r\n            />))) :\r\n           (this.props.yelpData.map((item) => (\r\n            <Marker\r\n              key={item.id}\r\n              position={{lat: item.coordinates.latitude, lng: item.coordinates.longitude}}\r\n              name={item.name}\r\n              onClick={this.onMarkerClick}\r\n            />)        \r\n            ))\r\n            } */}\r\n        <InfoWindow\r\n            marker={this.state.activeMarker}\r\n            visible={this.state.showInfo}\r\n            onClose={this.onInfoClose}>\r\n              <div>\r\n                <h1>Somethingsomethingsomething</h1>\r\n              </div>\r\n          </InfoWindow>\r\n      </Map>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (\"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\")\r\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}