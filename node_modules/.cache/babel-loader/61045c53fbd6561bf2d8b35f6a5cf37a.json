{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\src\\\\components\\\\MapContainer.js\";\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\n\nvar MapContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapContainer, _Component);\n\n  function MapContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      markers: [],\n      selectedPlace: null,\n      activeMarker: null,\n      showInfo: false // google-maps-react documentation: passing mapProps and map in their examples. https://github.com/fullstackreact/google-maps-react\n\n    };\n\n    _this.createMarkers = function (mapProps, map) {\n      // set google to mapProps as seen in doc for google-maps-react\n      var google = mapProps.google; // Google maps documentation for making marker\n      // Make an array to store markers that are made\n\n      var markers = []; // For each markerInfo object, generate a Marker\n\n      _this.props.markerInfo.forEach(function (marker) {\n        var myMarker = new google.maps.Marker({\n          position: {\n            lat: marker.position.lat,\n            lng: marker.position.lng\n          },\n          key: marker.key,\n          title: marker.name,\n          map: map\n        }); // store marker into array to push to set to state\n\n        markers.push(myMarker);\n      });\n\n      console.log(markers); // set state my markers\n\n      _this.setState({\n        markers: markers,\n        markersForFilter: markers\n      });\n    };\n\n    _this.onMarkerClick = function (marker, props, e) {\n      _this.setState({\n        activeMarker: marker,\n        selectedPlace: props,\n        showInfo: !_this.state.showInfo\n      });\n    };\n\n    _this.onInfoClose = function (props) {\n      if (_this.state.showInfo) {\n        _this.setState({\n          showInfo: false,\n          selectedPlace: null,\n          activeMarker: null\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"render\",\n    value: function render() {\n      var center = {\n        lat: 32.322613,\n        lng: -95.262592 // DONE: Map displays all location markers by default, and displays the filtered subset of location markers when a filter is applied.\n        // TODO: Clicking a marker displays unique information about a location somewhere on the page (modal, separate div, inside an infoWindow).\n        // Displays Map and markers. If filtered, only filtered markers are shown\n\n      };\n      return React.createElement(Map, {\n        \"aria-label\": \"map\",\n        role: \"application\",\n        google: this.props.google,\n        zoom: 15,\n        initialCenter: center,\n        onReady: this.createMarkers,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\"\n})(MapContainer);","map":{"version":3,"sources":["C:\\Users\\Rebekah\\Desktop\\Phase 2 Nanodegree\\final-project\\src\\components\\MapContainer.js"],"names":["React","Component","Map","GoogleApiWrapper","MapContainer","state","markers","selectedPlace","activeMarker","showInfo","createMarkers","mapProps","map","google","props","markerInfo","forEach","marker","myMarker","maps","Marker","position","lat","lng","key","title","name","push","console","log","setState","markersForFilter","onMarkerClick","e","onInfoClose","center","apiKey"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,mBAAtC;;IAEMC,Y;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,EADH;AAENC,MAAAA,aAAa,EAAE,IAFT;AAGNC,MAAAA,YAAY,EAAE,IAHR;AAINC,MAAAA,QAAQ,EAAE,KAJJ,CAOR;;AAPQ,K;;UAQRC,a,GAAgB,UAACC,QAAD,EAAWC,GAAX,EAAmB;AACjC;AADiC,UAEzBC,MAFyB,GAEdF,QAFc,CAEzBE,MAFyB,EAGjC;AACA;;AACA,UAAIP,OAAO,GAAG,EAAd,CALiC,CAMjC;;AACA,YAAKQ,KAAL,CAAWC,UAAX,CAAsBC,OAAtB,CAA8B,UAAAC,MAAM,EAAI;AACpC,YAAMC,QAAQ,GAAG,IAAIL,MAAM,CAACM,IAAP,CAAYC,MAAhB,CAAuB;AACpCC,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,GAAG,EAAEL,MAAM,CAACI,QAAP,CAAgBC,GAAvB;AAA4BC,YAAAA,GAAG,EAAEN,MAAM,CAACI,QAAP,CAAgBE;AAAjD,WAD0B;AAEpCC,UAAAA,GAAG,EAAEP,MAAM,CAACO,GAFwB;AAGpCC,UAAAA,KAAK,EAAER,MAAM,CAACS,IAHsB;AAIpCd,UAAAA,GAAG,EAAEA;AAJ+B,SAAvB,CAAjB,CADoC,CAOpC;;AACAN,QAAAA,OAAO,CAACqB,IAAR,CAAaT,QAAb;AACH,OATD;;AAUAU,MAAAA,OAAO,CAACC,GAAR,CAAYvB,OAAZ,EAjBiC,CAkBjC;;AACA,YAAKwB,QAAL,CAAc;AAAExB,QAAAA,OAAO,EAAEA,OAAX;AAAoByB,QAAAA,gBAAgB,EAAEzB;AAAtC,OAAd;AACH,K;;UAqBC0B,a,GAAgB,UAACf,MAAD,EAASH,KAAT,EAAgBmB,CAAhB,EAAsB;AACpC,YAAKH,QAAL,CAAc;AACZtB,QAAAA,YAAY,EAAES,MADF;AAEZV,QAAAA,aAAa,EAAEO,KAFH;AAGZL,QAAAA,QAAQ,EAAE,CAAC,MAAKJ,KAAL,CAAWI;AAHV,OAAd;AAKD,K;;UAEDyB,W,GAAc,UAACpB,KAAD,EAAW;AACvB,UAAI,MAAKT,KAAL,CAAWI,QAAf,EAAyB;AACvB,cAAKqB,QAAL,CAAc;AACZrB,UAAAA,QAAQ,EAAE,KADE;AAEZF,UAAAA,aAAa,EAAE,IAFH;AAGZC,UAAAA,YAAY,EAAE;AAHF,SAAd;AAKD;AACF,K;;;;;;;6BAEQ;AACP,UAAM2B,MAAM,GAAG;AACbb,QAAAA,GAAG,EAAE,SADQ;AAEbC,QAAAA,GAAG,EAAE,CAAC,SAFO,CAMf;AAEA;AAEA;;AAVe,OAAf;AAWA,aACE,oBAAC,GAAD;AACE,sBAAW,KADb;AAEE,QAAA,IAAI,EAAC,aAFP;AAGE,QAAA,MAAM,EAAE,KAAKT,KAAL,CAAWD,MAHrB;AAIE,QAAA,IAAI,EAAE,EAJR;AAKE,QAAA,aAAa,EAAEsB,MALjB;AAME,QAAA,OAAO,EAAE,KAAKzB,aANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAYD;;;;EA5FwBT,S;;AA+F3B,eAAeE,gBAAgB,CAAC;AAC9BiC,EAAAA,MAAM,EAAG;AADqB,CAAD,CAAhB,CAEZhC,YAFY,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\n\r\nclass MapContainer extends Component {\r\n  state = {\r\n    markers: [],\r\n    selectedPlace: null,\r\n    activeMarker: null,\r\n    showInfo: false,\r\n  }\r\n\r\n  // google-maps-react documentation: passing mapProps and map in their examples. https://github.com/fullstackreact/google-maps-react\r\n  createMarkers = (mapProps, map) => {\r\n    // set google to mapProps as seen in doc for google-maps-react\r\n    const { google } = mapProps;\r\n    // Google maps documentation for making marker\r\n    // Make an array to store markers that are made\r\n    let markers = [];\r\n    // For each markerInfo object, generate a Marker\r\n    this.props.markerInfo.forEach(marker => {\r\n        const myMarker = new google.maps.Marker({\r\n            position: { lat: marker.position.lat, lng: marker.position.lng },\r\n            key: marker.key,\r\n            title: marker.name,\r\n            map: map\r\n        });\r\n        // store marker into array to push to set to state\r\n        markers.push(myMarker);\r\n    });\r\n    console.log(markers);\r\n    // set state my markers\r\n    this.setState({ markers: markers, markersForFilter: markers });\r\n};\r\n\r\n  // createMarkers = (googleProps, map) => {\r\n  //   let markers = [];\r\n  //   if (this.props.markerInfo !== null) {\r\n  //     this.props.markerInfo.forEach(marker => {\r\n  //       marker = new googleProps.maps.Marker({\r\n  //         position: marker.position,\r\n  //         key: marker.key,\r\n  //         map: map\r\n  //       })\r\n  //       markers.push(marker);\r\n  //     })\r\n      \r\n  //     this.setState({ markers: markers });\r\n  //   }\r\n  //   console.log(markers);\r\n  // }\r\n\r\n\r\n\r\n  onMarkerClick = (marker, props, e) => {\r\n    this.setState({\r\n      activeMarker: marker,\r\n      selectedPlace: props,\r\n      showInfo: !this.state.showInfo\r\n    })\r\n  };\r\n\r\n  onInfoClose = (props) => {\r\n    if (this.state.showInfo) {\r\n      this.setState({\r\n        showInfo: false,\r\n        selectedPlace: null,\r\n        activeMarker: null\r\n      })\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const center = {\r\n      lat: 32.322613,\r\n      lng: -95.262592\r\n    }\r\n\r\n\r\n    // DONE: Map displays all location markers by default, and displays the filtered subset of location markers when a filter is applied.\r\n\r\n    // TODO: Clicking a marker displays unique information about a location somewhere on the page (modal, separate div, inside an infoWindow).\r\n\r\n    // Displays Map and markers. If filtered, only filtered markers are shown\r\n    return (\r\n      <Map\r\n        aria-label=\"map\"\r\n        role=\"application\"\r\n        google={this.props.google}\r\n        zoom={15}\r\n        initialCenter={center}\r\n        onReady={this.createMarkers}\r\n      >\r\n        {/* Display location information as markers on map */}\r\n      </Map>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (\"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\")\r\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}