{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Rebekah\\\\Desktop\\\\Phase 2 Nanodegree\\\\final-project\\\\src\\\\components\\\\MapContainer.js\";\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport Drawer from '@material-ui/core/Drawer';\nimport { DebounceInput } from 'react-debounce-input';\nimport Listing from './Listing';\n\nvar MapContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapContainer, _Component);\n\n  function MapContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      markers: [],\n      filteredMarkers: null,\n      filteredListings: null,\n      selectedPlace: null,\n      activeMarker: null,\n      showInfo: false,\n      query: \"\" // google-maps-react documentation: passing mapProps and map in their examples. https://github.com/fullstackreact/google-maps-react\n\n    };\n\n    _this.createMarkers = function (mapProps, map) {\n      // set google to mapProps from Map for marker creation\n      var google = mapProps.google; // array to store all markers\n\n      var markers = []; // For each markerInfo object, generate a Marker\n\n      _this.props.markerInfo.forEach(function (item) {\n        var marker = new google.maps.Marker({\n          position: {\n            lat: item.position.lat,\n            lng: item.position.lng\n          },\n          key: item.key,\n          name: item.name,\n          map: map,\n          animation: google.maps.Animation.Drop\n        }); // infoWindow for markers\n\n        var windowContent = \"<div className=\\\"infoWindow\\\">\\n            <h3>\".concat(marker.name, \"</h3>\\n            <p>Phone: \").concat(marker.phone, \"</p>\\n          </div>\");\n        var infoWindow = new google.maps.InfoWindow({\n          content: windowContent\n        });\n        marker.addListener('click', function () {\n          infoWindow.open(map, marker); // if (this.state.activeMarker !== null) {\n          //   this.setState({ activeMarker: null, showInfo: false })\n          // } else {\n          //   this.setState({ activeMarker: clickedMarker, showInfo: true })\n          // }\n        }); // store marker into array to push to set to state\n\n        markers.push(marker);\n      });\n\n      console.log(markers); // set state my markers\n\n      _this.setState({\n        markers: markers,\n        filteredMarkers: markers\n      });\n    };\n\n    _this.updateQuery = function (query) {\n      _this.setState({\n        query: query\n      });\n\n      _this.updateListing(query);\n    };\n\n    _this.updateListing = function (query) {\n      if (query) {\n        _this.setState(_objectSpread({}, _this.state, {\n          filteredListings: _this.filterListings(query),\n          filteredMarkers: _this.filterMarkers(query)\n        }));\n      } else {\n        _this.setState({\n          filteredListings: null,\n          filteredMarkers: null\n        });\n      }\n    };\n\n    _this.filterListings = function (query) {\n      if (!query) {\n        return;\n      } else {\n        return _this.props.markerInfo.filter(function (listing) {\n          return listing.name.toLowerCase().includes(query.toLowerCase());\n        });\n      }\n    };\n\n    _this.filterMarkers = function (query) {\n      if (!query) {\n        return;\n      } else {\n        return _this.state.markers.filter(function (listing) {\n          return listing.name.toLowerCase().includes(query.toLowerCase());\n        });\n      }\n    };\n\n    _this.displayListings = function () {\n      if (_this.state.filteredListings !== null) {\n        var filteredListing = _this.state.filteredListings.map(function (listing) {\n          return React.createElement(\"li\", {\n            key: listing.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }, React.createElement(Listing, {\n            listing: listing,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }));\n        });\n\n        return filteredListing;\n      } else {\n        return _this.props.markerInfo.map(function (listing) {\n          return React.createElement(\"li\", {\n            key: listing.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134\n            },\n            __self: this\n          }, React.createElement(Listing, {\n            listing: listing,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          }));\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(MapContainer, [{\n    key: \"render\",\n    // componentDidUpdate() {\n    //   this.updateListing();\n    // }\n    value: function render() {\n      var _this2 = this;\n\n      var center = {\n        lat: 32.322613,\n        lng: -95.262592 // TODO: Map displays all location markers by default, and displays the filtered subset of location markers when a filter is applied.\n        // TODO: Clicking a marker displays unique information about a location somewhere on the page (modal, separate div, inside an infoWindow).\n\n      };\n      return (// Displays Map and markers.\n        React.createElement(Map, {\n          \"aria-label\": \"map\",\n          role: \"application\",\n          google: this.props.google,\n          zoom: 15,\n          initialCenter: center,\n          onClick: this.props.toggleMenu,\n          onReady: this.createMarkers,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, React.createElement(Drawer, {\n          open: this.props.menuOpen,\n          onClose: this.props.toggleMenu,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, React.createElement(\"section\", {\n          className: \"listMenu\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, React.createElement(DebounceInput, {\n          minLength: 1,\n          debounceTimeout: 500,\n          className: \"filter\",\n          element: \"input\",\n          type: \"text\",\n          placeholder: \"Filter Listings by Name\",\n          onChange: function onChange(e) {\n            return _this2.updateQuery(e.target.value);\n          },\n          value: this.state.query,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }), React.createElement(\"ul\", {\n          className: \"list\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, this.displayListings()))))\n      );\n    }\n  }]);\n\n  return MapContainer;\n}(Component);\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\"\n})(MapContainer);","map":{"version":3,"sources":["C:\\Users\\Rebekah\\Desktop\\Phase 2 Nanodegree\\final-project\\src\\components\\MapContainer.js"],"names":["React","Component","Map","GoogleApiWrapper","Drawer","DebounceInput","Listing","MapContainer","state","markers","filteredMarkers","filteredListings","selectedPlace","activeMarker","showInfo","query","createMarkers","mapProps","map","google","props","markerInfo","forEach","item","marker","maps","Marker","position","lat","lng","key","name","animation","Animation","Drop","windowContent","phone","infoWindow","InfoWindow","content","addListener","open","push","console","log","setState","updateQuery","updateListing","filterListings","filterMarkers","filter","listing","toLowerCase","includes","displayListings","filteredListing","id","center","toggleMenu","menuOpen","e","target","value","apiKey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport { DebounceInput } from 'react-debounce-input';\r\nimport Listing from './Listing';\r\n\r\nclass MapContainer extends Component {\r\n  state = {\r\n    markers: [],\r\n    filteredMarkers: null,\r\n    filteredListings: null,\r\n    selectedPlace: null,\r\n    activeMarker: null,\r\n    showInfo: false,\r\n    query: \"\",\r\n  }\r\n\r\n  // google-maps-react documentation: passing mapProps and map in their examples. https://github.com/fullstackreact/google-maps-react\r\n  createMarkers = (mapProps, map) => {\r\n    // set google to mapProps from Map for marker creation\r\n    const { google } = mapProps;\r\n\r\n    // array to store all markers\r\n    let markers = [];\r\n\r\n    // For each markerInfo object, generate a Marker\r\n    this.props.markerInfo.forEach(item => {\r\n      const marker = new google.maps.Marker({\r\n        position: { lat: item.position.lat, lng: item.position.lng },\r\n        key: item.key,\r\n        name: item.name,\r\n        map: map,\r\n        animation: google.maps.Animation.Drop,\r\n      });\r\n      \r\n      // infoWindow for markers\r\n      let windowContent =\r\n        `<div className=\"infoWindow\">\r\n            <h3>${marker.name}</h3>\r\n            <p>Phone: ${marker.phone}</p>\r\n          </div>`\r\n      let infoWindow = new google.maps.InfoWindow({\r\n        content: windowContent\r\n      });\r\n\r\n      marker.addListener('click', () => {\r\n        infoWindow.open(map, marker);\r\n        // if (this.state.activeMarker !== null) {\r\n        //   this.setState({ activeMarker: null, showInfo: false })\r\n        // } else {\r\n        //   this.setState({ activeMarker: clickedMarker, showInfo: true })\r\n        // }\r\n      });\r\n\r\n\r\n      // store marker into array to push to set to state\r\n      markers.push(marker);\r\n    });\r\n    console.log(markers);\r\n    // set state my markers\r\n    this.setState({ markers: markers, filteredMarkers: markers });\r\n  };\r\n\r\n  // Updates filter input if there's a query, then updates listings and markers\r\n  updateQuery = (query) => {\r\n    this.setState({ query: query })\r\n    this.updateListing(query)\r\n  };\r\n\r\n  // Set filteredListings state if query input\r\n  updateListing = (query) => {\r\n    if (query) {\r\n      this.setState({\r\n        ...this.state,\r\n        filteredListings: this.filterListings(query),\r\n        filteredMarkers: this.filterMarkers(query)\r\n      });\r\n    } else {\r\n      this.setState({ filteredListings: null, filteredMarkers: null })\r\n    }\r\n  }\r\n\r\n  //Update listings based on filter input\r\n  filterListings = (query) => {\r\n    if (!query) {\r\n      return;\r\n    } else {\r\n      return this.props.markerInfo.filter(listing => listing.name.toLowerCase().includes(query.toLowerCase()));\r\n    }\r\n  }\r\n\r\n  //Update markers based on filter input\r\n  filterMarkers = (query) => {\r\n    if (!query) {\r\n      return;\r\n    } else {\r\n      return this.state.markers.filter(listing => listing.name.toLowerCase().includes(query.toLowerCase()));\r\n    }\r\n  }\r\n\r\n\r\n  // // set InfoWindow to show and active marker state when marker is clicked\r\n  // onMarkerClick = (marker, props, e) => {\r\n  //   this.setState({\r\n  //     activeMarker: marker,\r\n  //     selectedPlace: props,\r\n  //     showInfo: !this.state.showInfo\r\n  //   })\r\n  // };\r\n\r\n  // onInfoClose = (props) => {\r\n  //   if (this.state.showInfo) {\r\n  //     this.setState({\r\n  //       showInfo: false,\r\n  //       selectedPlace: null,\r\n  //       activeMarker: null\r\n  //     })\r\n  //   }\r\n  // };\r\n\r\n\r\n  // Map over filteredListings and display filtered listings. If null, display all listings\r\n  displayListings = () => {\r\n    if (this.state.filteredListings !== null) {\r\n      let filteredListing = this.state.filteredListings.map(listing => (\r\n        <li key={listing.id}>\r\n          <Listing\r\n            listing={listing} />\r\n        </li>\r\n      ))\r\n      return filteredListing;\r\n    } else {\r\n      return this.props.markerInfo.map(listing => (\r\n        <li key={listing.id}>\r\n          <Listing\r\n            listing={listing} />\r\n        </li>))\r\n    }\r\n  }\r\n\r\n  // componentDidUpdate() {\r\n  //   this.updateListing();\r\n  // }\r\n\r\n  render() {\r\n    const center = {\r\n      lat: 32.322613,\r\n      lng: -95.262592\r\n    }\r\n\r\n    // TODO: Map displays all location markers by default, and displays the filtered subset of location markers when a filter is applied.\r\n\r\n    // TODO: Clicking a marker displays unique information about a location somewhere on the page (modal, separate div, inside an infoWindow).\r\n\r\n    return (\r\n      // Displays Map and markers.\r\n      <Map\r\n        aria-label=\"map\"\r\n        role=\"application\"\r\n        google={this.props.google}\r\n        zoom={15}\r\n        initialCenter={center}\r\n        onClick={this.props.toggleMenu}\r\n        onReady={this.createMarkers} >\r\n        <Drawer\r\n          open={this.props.menuOpen}\r\n          onClose={this.props.toggleMenu} >\r\n          <section className=\"listMenu\">\r\n            <DebounceInput\r\n              minLength={1}\r\n              debounceTimeout={500}\r\n              className='filter'\r\n              element=\"input\"\r\n              type='text'\r\n              placeholder='Filter Listings by Name'\r\n              onChange={e => this.updateQuery(e.target.value)}\r\n              value={this.state.query} />\r\n            <ul className='list'>\r\n              {this.displayListings()}\r\n            </ul>\r\n          </section>\r\n        </Drawer>\r\n        {/* <InfoWindow\r\n          marker={this.state.activeMarker}\r\n          visible={this.state.showInfo}\r\n          onClose={this.onInfoClose}>\r\n          <div>\r\n            <h1>Somethingsomethingsomething</h1>\r\n          </div>\r\n        </InfoWindow> */}\r\n      </Map>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (\"AIzaSyCxXK6lMDoTo4dHosssdE0SyJ8UtVOtpbU\")\r\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}